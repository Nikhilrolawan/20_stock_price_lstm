{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30684,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"from sklearn.pipeline import Pipeline\nfrom sklearn.base import BaseEstimator, TransformerMixin\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import train_test_split\nfrom scikeras.wrappers import KerasRegressor","metadata":{"execution":{"iopub.status.busy":"2024-04-13T16:15:00.766156Z","iopub.execute_input":"2024-04-13T16:15:00.766582Z","iopub.status.idle":"2024-04-13T16:15:00.772605Z","shell.execute_reply.started":"2024-04-13T16:15:00.766549Z","shell.execute_reply":"2024-04-13T16:15:00.771555Z"},"trusted":true},"execution_count":49,"outputs":[]},{"cell_type":"code","source":"import tensorflow as tf\nimport warnings\nwarnings.filterwarnings('ignore')","metadata":{"execution":{"iopub.status.busy":"2024-04-13T16:42:41.610693Z","iopub.execute_input":"2024-04-13T16:42:41.612641Z","iopub.status.idle":"2024-04-13T16:42:41.620338Z","shell.execute_reply.started":"2024-04-13T16:42:41.612589Z","shell.execute_reply":"2024-04-13T16:42:41.618172Z"},"trusted":true},"execution_count":84,"outputs":[]},{"cell_type":"code","source":"np.random.seed(1234)\ntf.random.set_seed(1234)","metadata":{"execution":{"iopub.status.busy":"2024-04-13T16:42:42.573917Z","iopub.execute_input":"2024-04-13T16:42:42.575127Z","iopub.status.idle":"2024-04-13T16:42:42.614413Z","shell.execute_reply.started":"2024-04-13T16:42:42.575074Z","shell.execute_reply":"2024-04-13T16:42:42.612725Z"},"trusted":true},"execution_count":85,"outputs":[]},{"cell_type":"code","source":"import yfinance as yf\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import MinMaxScaler\n\nscaler = MinMaxScaler(feature_range=(0,1))","metadata":{"execution":{"iopub.status.busy":"2024-04-13T16:15:00.798089Z","iopub.execute_input":"2024-04-13T16:15:00.798528Z","iopub.status.idle":"2024-04-13T16:15:00.805410Z","shell.execute_reply.started":"2024-04-13T16:15:00.798491Z","shell.execute_reply":"2024-04-13T16:15:00.804191Z"},"trusted":true},"execution_count":50,"outputs":[]},{"cell_type":"code","source":"# %pip install -q scikeras ","metadata":{"execution":{"iopub.status.busy":"2024-04-13T16:15:00.864330Z","iopub.execute_input":"2024-04-13T16:15:00.865407Z","iopub.status.idle":"2024-04-13T16:15:00.870425Z","shell.execute_reply.started":"2024-04-13T16:15:00.865360Z","shell.execute_reply":"2024-04-13T16:15:00.869132Z"},"trusted":true},"execution_count":51,"outputs":[]},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nfrom keras.models import Sequential\nfrom keras.layers import Dense, LSTM","metadata":{"execution":{"iopub.status.busy":"2024-04-13T16:15:00.895968Z","iopub.execute_input":"2024-04-13T16:15:00.896442Z","iopub.status.idle":"2024-04-13T16:15:00.902207Z","shell.execute_reply.started":"2024-04-13T16:15:00.896404Z","shell.execute_reply":"2024-04-13T16:15:00.901068Z"},"trusted":true},"execution_count":52,"outputs":[]},{"cell_type":"code","source":"# Define a transformer to preprocess the data\nclass DataPreprocessor(BaseEstimator, TransformerMixin):\n    \n    def __init__(self, n_steps=60):\n        self.n_steps = n_steps\n\n    def fit(self, X, y=None):\n        return self\n\n    def transform(self, X, y=None):\n        scaler = MinMaxScaler(feature_range=(0,1))\n        scaled_data = scaler.fit_transform(X)\n        training_data_len = int(np.ceil( len(X) * .83 ))\n        train_data = scaled_data[0:int(training_data_len), :]\n\n        test_data = scaled_data[training_data_len - 60: , :]\n        # Create the data sets x_test and y_test\n        x_test = []\n        y_test = X[training_data_len:, :]\n        x_test = np.array([test_data[i-60:i, 0] for i in range(60, len(test_data))])\n        # Convert the data to a numpy array\n        x_test = np.array(x_test)\n\n        # Reshape the data\n        x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1 ))\n\n        X_transformed= []\n        y_transformed =[]\n        for i in range(self.n_steps, len(train_data)):\n            # X_transformed.append(train_data[i-self.n_steps:i, 0])\n            # y_transformed.append(train_data[i, 0])\n\n            \n            X_transformed = np.array([train_data[i-self.n_steps:i, 0] for i in range(self.n_steps, len(train_data))])\n            y_transformed = np.array([train_data[i, 0] for i in range(self.n_steps, len(train_data))])\n            \n            X_transformed=np.array(X_transformed)\n            y_transformed=np.array(y_transformed)\n            X_transformed=np.reshape(X_transformed, (X_transformed.shape[0], X_transformed.shape[1], 1 ))\n            # y_transformed=np.reshape( (y_transformed.shape[0], y_transformed.shape[1], 1 ))\n\n        return X_transformed,y_transformed,x_test,y_test\n        # return np.array(X_transformed), np.array(y_transformed)","metadata":{"execution":{"iopub.status.busy":"2024-04-13T16:15:00.922328Z","iopub.execute_input":"2024-04-13T16:15:00.923129Z","iopub.status.idle":"2024-04-13T16:15:00.938348Z","shell.execute_reply.started":"2024-04-13T16:15:00.923091Z","shell.execute_reply":"2024-04-13T16:15:00.936444Z"},"trusted":true},"execution_count":53,"outputs":[]},{"cell_type":"code","source":"# Define a custom LSTM model\ndef create_lstm_model():\n    model = Sequential()\n    model.add(LSTM(128, return_sequences=True, input_shape=(60, 1)))\n    model.add(LSTM(64, return_sequences=False))\n    model.add(Dense(25))\n    model.add(Dense(1))\n    model.compile(optimizer='adam', loss='mean_squared_error')\n    return model\n\n# Define a transformer to convert predictions back to original scale\n# class InverseScaler(BaseEstimator, TransformerMixin):\n#     def __init__(self, scaler):\n#         self.scaler = scaler\n\n#     def fit(self, X, y=None):\n#         return self\n\n#     def transform(self, X, y=None):\n#         return self.scaler.inverse_transform(X)\n    \nkeras_regressor = KerasRegressor(build_fn=create_lstm_model, epochs=2, batch_size=1, verbose=2)\n\n# Define the pipeline\npreprocess_pipe = Pipeline([\n    ('preprocessor', DataPreprocessor())])\npipe = Pipeline([\n    ('model', keras_regressor)\n    # assuming 'scaler' is defined somewhere\n])","metadata":{"execution":{"iopub.status.busy":"2024-04-13T16:15:00.940404Z","iopub.execute_input":"2024-04-13T16:15:00.941438Z","iopub.status.idle":"2024-04-13T16:15:00.956119Z","shell.execute_reply.started":"2024-04-13T16:15:00.941400Z","shell.execute_reply":"2024-04-13T16:15:00.954766Z"},"trusted":true},"execution_count":54,"outputs":[]},{"cell_type":"code","source":"df1 = yf.download('TATASTEEL.NS', start='2000-01-01', end='2024-01-01')\n# Create a new dataframe with only the 'Close column\ndata1 = df1.filter(['Close'])\n# Convert the dataframe to a numpy array\ndataset1 = data1.values","metadata":{"execution":{"iopub.status.busy":"2024-04-13T16:15:00.961471Z","iopub.execute_input":"2024-04-13T16:15:00.962063Z","iopub.status.idle":"2024-04-13T16:15:01.105835Z","shell.execute_reply.started":"2024-04-13T16:15:00.962028Z","shell.execute_reply":"2024-04-13T16:15:01.104472Z"},"trusted":true},"execution_count":55,"outputs":[{"name":"stderr","text":"[*********************100%%**********************]  1 of 1 completed\n","output_type":"stream"}]},{"cell_type":"code","source":"data1.shape","metadata":{"execution":{"iopub.status.busy":"2024-04-13T16:15:01.107913Z","iopub.execute_input":"2024-04-13T16:15:01.108259Z","iopub.status.idle":"2024-04-13T16:15:01.115792Z","shell.execute_reply.started":"2024-04-13T16:15:01.108231Z","shell.execute_reply":"2024-04-13T16:15:01.114151Z"},"trusted":true},"execution_count":56,"outputs":[{"execution_count":56,"output_type":"execute_result","data":{"text/plain":"(5993, 1)"},"metadata":{}}]},{"cell_type":"code","source":"dataset1","metadata":{"execution":{"iopub.status.busy":"2024-04-13T16:15:01.117620Z","iopub.execute_input":"2024-04-13T16:15:01.118497Z","iopub.status.idle":"2024-04-13T16:15:01.129146Z","shell.execute_reply.started":"2024-04-13T16:15:01.118455Z","shell.execute_reply":"2024-04-13T16:15:01.128117Z"},"trusted":true},"execution_count":57,"outputs":[{"execution_count":57,"output_type":"execute_result","data":{"text/plain":"array([[  8.55930519],\n       [  8.46666622],\n       [  8.78950024],\n       ...,\n       [137.19999695],\n       [138.1499939 ],\n       [139.6000061 ]])"},"metadata":{}}]},{"cell_type":"code","source":"(preprocess_pipe.fit(dataset1))","metadata":{"execution":{"iopub.status.busy":"2024-04-13T16:15:01.132299Z","iopub.execute_input":"2024-04-13T16:15:01.133472Z","iopub.status.idle":"2024-04-13T16:15:01.145239Z","shell.execute_reply.started":"2024-04-13T16:15:01.133413Z","shell.execute_reply":"2024-04-13T16:15:01.143636Z"},"trusted":true},"execution_count":58,"outputs":[{"execution_count":58,"output_type":"execute_result","data":{"text/plain":"Pipeline(steps=[('preprocessor', DataPreprocessor())])","text/html":"<style>#sk-container-id-3 {\n  /* Definition of color scheme common for light and dark mode */\n  --sklearn-color-text: black;\n  --sklearn-color-line: gray;\n  /* Definition of color scheme for unfitted estimators */\n  --sklearn-color-unfitted-level-0: #fff5e6;\n  --sklearn-color-unfitted-level-1: #f6e4d2;\n  --sklearn-color-unfitted-level-2: #ffe0b3;\n  --sklearn-color-unfitted-level-3: chocolate;\n  /* Definition of color scheme for fitted estimators */\n  --sklearn-color-fitted-level-0: #f0f8ff;\n  --sklearn-color-fitted-level-1: #d4ebff;\n  --sklearn-color-fitted-level-2: #b3dbfd;\n  --sklearn-color-fitted-level-3: cornflowerblue;\n\n  /* Specific color for light theme */\n  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n  --sklearn-color-icon: #696969;\n\n  @media (prefers-color-scheme: dark) {\n    /* Redefinition of color scheme for dark theme */\n    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n    --sklearn-color-icon: #878787;\n  }\n}\n\n#sk-container-id-3 {\n  color: var(--sklearn-color-text);\n}\n\n#sk-container-id-3 pre {\n  padding: 0;\n}\n\n#sk-container-id-3 input.sk-hidden--visually {\n  border: 0;\n  clip: rect(1px 1px 1px 1px);\n  clip: rect(1px, 1px, 1px, 1px);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  width: 1px;\n}\n\n#sk-container-id-3 div.sk-dashed-wrapped {\n  border: 1px dashed var(--sklearn-color-line);\n  margin: 0 0.4em 0.5em 0.4em;\n  box-sizing: border-box;\n  padding-bottom: 0.4em;\n  background-color: var(--sklearn-color-background);\n}\n\n#sk-container-id-3 div.sk-container {\n  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n     but bootstrap.min.css set `[hidden] { display: none !important; }`\n     so we also need the `!important` here to be able to override the\n     default hidden behavior on the sphinx rendered scikit-learn.org.\n     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n  display: inline-block !important;\n  position: relative;\n}\n\n#sk-container-id-3 div.sk-text-repr-fallback {\n  display: none;\n}\n\ndiv.sk-parallel-item,\ndiv.sk-serial,\ndiv.sk-item {\n  /* draw centered vertical line to link estimators */\n  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n  background-size: 2px 100%;\n  background-repeat: no-repeat;\n  background-position: center center;\n}\n\n/* Parallel-specific style estimator block */\n\n#sk-container-id-3 div.sk-parallel-item::after {\n  content: \"\";\n  width: 100%;\n  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n  flex-grow: 1;\n}\n\n#sk-container-id-3 div.sk-parallel {\n  display: flex;\n  align-items: stretch;\n  justify-content: center;\n  background-color: var(--sklearn-color-background);\n  position: relative;\n}\n\n#sk-container-id-3 div.sk-parallel-item {\n  display: flex;\n  flex-direction: column;\n}\n\n#sk-container-id-3 div.sk-parallel-item:first-child::after {\n  align-self: flex-end;\n  width: 50%;\n}\n\n#sk-container-id-3 div.sk-parallel-item:last-child::after {\n  align-self: flex-start;\n  width: 50%;\n}\n\n#sk-container-id-3 div.sk-parallel-item:only-child::after {\n  width: 0;\n}\n\n/* Serial-specific style estimator block */\n\n#sk-container-id-3 div.sk-serial {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background-color: var(--sklearn-color-background);\n  padding-right: 1em;\n  padding-left: 1em;\n}\n\n\n/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\nclickable and can be expanded/collapsed.\n- Pipeline and ColumnTransformer use this feature and define the default style\n- Estimators will overwrite some part of the style using the `sk-estimator` class\n*/\n\n/* Pipeline and ColumnTransformer style (default) */\n\n#sk-container-id-3 div.sk-toggleable {\n  /* Default theme specific background. It is overwritten whether we have a\n  specific estimator or a Pipeline/ColumnTransformer */\n  background-color: var(--sklearn-color-background);\n}\n\n/* Toggleable label */\n#sk-container-id-3 label.sk-toggleable__label {\n  cursor: pointer;\n  display: block;\n  width: 100%;\n  margin-bottom: 0;\n  padding: 0.5em;\n  box-sizing: border-box;\n  text-align: center;\n}\n\n#sk-container-id-3 label.sk-toggleable__label-arrow:before {\n  /* Arrow on the left of the label */\n  content: \"▸\";\n  float: left;\n  margin-right: 0.25em;\n  color: var(--sklearn-color-icon);\n}\n\n#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {\n  color: var(--sklearn-color-text);\n}\n\n/* Toggleable content - dropdown */\n\n#sk-container-id-3 div.sk-toggleable__content {\n  max-height: 0;\n  max-width: 0;\n  overflow: hidden;\n  text-align: left;\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-3 div.sk-toggleable__content.fitted {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n#sk-container-id-3 div.sk-toggleable__content pre {\n  margin: 0.2em;\n  border-radius: 0.25em;\n  color: var(--sklearn-color-text);\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-3 div.sk-toggleable__content.fitted pre {\n  /* unfitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n  /* Expand drop-down */\n  max-height: 200px;\n  max-width: 100%;\n  overflow: auto;\n}\n\n#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n  content: \"▾\";\n}\n\n/* Pipeline/ColumnTransformer-specific style */\n\n#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-3 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Estimator-specific style */\n\n/* Colorize estimator box */\n#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-3 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n#sk-container-id-3 div.sk-label label.sk-toggleable__label,\n#sk-container-id-3 div.sk-label label {\n  /* The background is the default theme color */\n  color: var(--sklearn-color-text-on-default-background);\n}\n\n/* On hover, darken the color of the background */\n#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n/* Label box, darken color on hover, fitted */\n#sk-container-id-3 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Estimator label */\n\n#sk-container-id-3 div.sk-label label {\n  font-family: monospace;\n  font-weight: bold;\n  display: inline-block;\n  line-height: 1.2em;\n}\n\n#sk-container-id-3 div.sk-label-container {\n  text-align: center;\n}\n\n/* Estimator-specific */\n#sk-container-id-3 div.sk-estimator {\n  font-family: monospace;\n  border: 1px dotted var(--sklearn-color-border-box);\n  border-radius: 0.25em;\n  box-sizing: border-box;\n  margin-bottom: 0.5em;\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-3 div.sk-estimator.fitted {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n/* on hover */\n#sk-container-id-3 div.sk-estimator:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-3 div.sk-estimator.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Specification for estimator info (e.g. \"i\" and \"?\") */\n\n/* Common style for \"i\" and \"?\" */\n\n.sk-estimator-doc-link,\na:link.sk-estimator-doc-link,\na:visited.sk-estimator-doc-link {\n  float: right;\n  font-size: smaller;\n  line-height: 1em;\n  font-family: monospace;\n  background-color: var(--sklearn-color-background);\n  border-radius: 1em;\n  height: 1em;\n  width: 1em;\n  text-decoration: none !important;\n  margin-left: 1ex;\n  /* unfitted */\n  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n  color: var(--sklearn-color-unfitted-level-1);\n}\n\n.sk-estimator-doc-link.fitted,\na:link.sk-estimator-doc-link.fitted,\na:visited.sk-estimator-doc-link.fitted {\n  /* fitted */\n  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n  color: var(--sklearn-color-fitted-level-1);\n}\n\n/* On hover */\ndiv.sk-estimator:hover .sk-estimator-doc-link:hover,\n.sk-estimator-doc-link:hover,\ndiv.sk-label-container:hover .sk-estimator-doc-link:hover,\n.sk-estimator-doc-link:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\ndiv.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n.sk-estimator-doc-link.fitted:hover,\ndiv.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n.sk-estimator-doc-link.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\n/* Span, style for the box shown on hovering the info icon */\n.sk-estimator-doc-link span {\n  display: none;\n  z-index: 9999;\n  position: relative;\n  font-weight: normal;\n  right: .2ex;\n  padding: .5ex;\n  margin: .5ex;\n  width: min-content;\n  min-width: 20ex;\n  max-width: 50ex;\n  color: var(--sklearn-color-text);\n  box-shadow: 2pt 2pt 4pt #999;\n  /* unfitted */\n  background: var(--sklearn-color-unfitted-level-0);\n  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n}\n\n.sk-estimator-doc-link.fitted span {\n  /* fitted */\n  background: var(--sklearn-color-fitted-level-0);\n  border: var(--sklearn-color-fitted-level-3);\n}\n\n.sk-estimator-doc-link:hover span {\n  display: block;\n}\n\n/* \"?\"-specific style due to the `<a>` HTML tag */\n\n#sk-container-id-3 a.estimator_doc_link {\n  float: right;\n  font-size: 1rem;\n  line-height: 1em;\n  font-family: monospace;\n  background-color: var(--sklearn-color-background);\n  border-radius: 1rem;\n  height: 1rem;\n  width: 1rem;\n  text-decoration: none;\n  /* unfitted */\n  color: var(--sklearn-color-unfitted-level-1);\n  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n}\n\n#sk-container-id-3 a.estimator_doc_link.fitted {\n  /* fitted */\n  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n  color: var(--sklearn-color-fitted-level-1);\n}\n\n/* On hover */\n#sk-container-id-3 a.estimator_doc_link:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\n#sk-container-id-3 a.estimator_doc_link.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-3);\n}\n</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;preprocessor&#x27;, DataPreprocessor())])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label  sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" ><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label  sk-toggleable__label-arrow \">&nbsp;&nbsp;Pipeline<a class=\"sk-estimator-doc-link \" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.pipeline.Pipeline.html\">?<span>Documentation for Pipeline</span></a><span class=\"sk-estimator-doc-link \">i<span>Not fitted</span></span></label><div class=\"sk-toggleable__content \"><pre>Pipeline(steps=[(&#x27;preprocessor&#x27;, DataPreprocessor())])</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator  sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" ><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label  sk-toggleable__label-arrow \">DataPreprocessor</label><div class=\"sk-toggleable__content \"><pre>DataPreprocessor()</pre></div> </div></div></div></div></div></div>"},"metadata":{}}]},{"cell_type":"code","source":"x_n,y_n,test,y_test=preprocess_pipe.transform(dataset1)","metadata":{"execution":{"iopub.status.busy":"2024-04-13T16:15:01.147251Z","iopub.execute_input":"2024-04-13T16:15:01.147650Z","iopub.status.idle":"2024-04-13T16:15:45.829505Z","shell.execute_reply.started":"2024-04-13T16:15:01.147598Z","shell.execute_reply":"2024-04-13T16:15:45.828177Z"},"trusted":true},"execution_count":59,"outputs":[]},{"cell_type":"code","source":"print(x_n.shape)\nprint(y_n.shape)\nprint(test.shape)\nprint(y_test.shape)","metadata":{"execution":{"iopub.status.busy":"2024-04-13T16:15:45.831994Z","iopub.execute_input":"2024-04-13T16:15:45.832770Z","iopub.status.idle":"2024-04-13T16:15:45.839230Z","shell.execute_reply.started":"2024-04-13T16:15:45.832727Z","shell.execute_reply":"2024-04-13T16:15:45.838055Z"},"trusted":true},"execution_count":60,"outputs":[{"name":"stdout","text":"(4915, 60, 1)\n(4915,)\n(1018, 60, 1)\n(1018, 1)\n","output_type":"stream"}]},{"cell_type":"code","source":"pipe.fit(x_n,y_n)","metadata":{"execution":{"iopub.status.busy":"2024-04-13T16:15:45.841419Z","iopub.execute_input":"2024-04-13T16:15:45.841949Z","iopub.status.idle":"2024-04-13T16:21:49.835293Z","shell.execute_reply.started":"2024-04-13T16:15:45.841908Z","shell.execute_reply":"2024-04-13T16:21:49.833968Z"},"trusted":true},"execution_count":61,"outputs":[{"name":"stdout","text":"Epoch 1/2\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n  X, y = self._initialize(X, y)\n/opt/conda/lib/python3.10/site-packages/keras/src/layers/rnn/rnn.py:204: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n  super().__init__(**kwargs)\n","output_type":"stream"},{"name":"stdout","text":"4915/4915 - 183s - 37ms/step - loss: 0.0010\nEpoch 2/2\n4915/4915 - 181s - 37ms/step - loss: 8.3485e-04\n","output_type":"stream"},{"execution_count":61,"output_type":"execute_result","data":{"text/plain":"Pipeline(steps=[('model',\n                 KerasRegressor(batch_size=1, build_fn=<function create_lstm_model at 0x7876cd4b7520>, epochs=2, verbose=2))])","text/html":"<style>#sk-container-id-4 {\n  /* Definition of color scheme common for light and dark mode */\n  --sklearn-color-text: black;\n  --sklearn-color-line: gray;\n  /* Definition of color scheme for unfitted estimators */\n  --sklearn-color-unfitted-level-0: #fff5e6;\n  --sklearn-color-unfitted-level-1: #f6e4d2;\n  --sklearn-color-unfitted-level-2: #ffe0b3;\n  --sklearn-color-unfitted-level-3: chocolate;\n  /* Definition of color scheme for fitted estimators */\n  --sklearn-color-fitted-level-0: #f0f8ff;\n  --sklearn-color-fitted-level-1: #d4ebff;\n  --sklearn-color-fitted-level-2: #b3dbfd;\n  --sklearn-color-fitted-level-3: cornflowerblue;\n\n  /* Specific color for light theme */\n  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n  --sklearn-color-icon: #696969;\n\n  @media (prefers-color-scheme: dark) {\n    /* Redefinition of color scheme for dark theme */\n    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n    --sklearn-color-icon: #878787;\n  }\n}\n\n#sk-container-id-4 {\n  color: var(--sklearn-color-text);\n}\n\n#sk-container-id-4 pre {\n  padding: 0;\n}\n\n#sk-container-id-4 input.sk-hidden--visually {\n  border: 0;\n  clip: rect(1px 1px 1px 1px);\n  clip: rect(1px, 1px, 1px, 1px);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  width: 1px;\n}\n\n#sk-container-id-4 div.sk-dashed-wrapped {\n  border: 1px dashed var(--sklearn-color-line);\n  margin: 0 0.4em 0.5em 0.4em;\n  box-sizing: border-box;\n  padding-bottom: 0.4em;\n  background-color: var(--sklearn-color-background);\n}\n\n#sk-container-id-4 div.sk-container {\n  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n     but bootstrap.min.css set `[hidden] { display: none !important; }`\n     so we also need the `!important` here to be able to override the\n     default hidden behavior on the sphinx rendered scikit-learn.org.\n     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n  display: inline-block !important;\n  position: relative;\n}\n\n#sk-container-id-4 div.sk-text-repr-fallback {\n  display: none;\n}\n\ndiv.sk-parallel-item,\ndiv.sk-serial,\ndiv.sk-item {\n  /* draw centered vertical line to link estimators */\n  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n  background-size: 2px 100%;\n  background-repeat: no-repeat;\n  background-position: center center;\n}\n\n/* Parallel-specific style estimator block */\n\n#sk-container-id-4 div.sk-parallel-item::after {\n  content: \"\";\n  width: 100%;\n  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n  flex-grow: 1;\n}\n\n#sk-container-id-4 div.sk-parallel {\n  display: flex;\n  align-items: stretch;\n  justify-content: center;\n  background-color: var(--sklearn-color-background);\n  position: relative;\n}\n\n#sk-container-id-4 div.sk-parallel-item {\n  display: flex;\n  flex-direction: column;\n}\n\n#sk-container-id-4 div.sk-parallel-item:first-child::after {\n  align-self: flex-end;\n  width: 50%;\n}\n\n#sk-container-id-4 div.sk-parallel-item:last-child::after {\n  align-self: flex-start;\n  width: 50%;\n}\n\n#sk-container-id-4 div.sk-parallel-item:only-child::after {\n  width: 0;\n}\n\n/* Serial-specific style estimator block */\n\n#sk-container-id-4 div.sk-serial {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background-color: var(--sklearn-color-background);\n  padding-right: 1em;\n  padding-left: 1em;\n}\n\n\n/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\nclickable and can be expanded/collapsed.\n- Pipeline and ColumnTransformer use this feature and define the default style\n- Estimators will overwrite some part of the style using the `sk-estimator` class\n*/\n\n/* Pipeline and ColumnTransformer style (default) */\n\n#sk-container-id-4 div.sk-toggleable {\n  /* Default theme specific background. It is overwritten whether we have a\n  specific estimator or a Pipeline/ColumnTransformer */\n  background-color: var(--sklearn-color-background);\n}\n\n/* Toggleable label */\n#sk-container-id-4 label.sk-toggleable__label {\n  cursor: pointer;\n  display: block;\n  width: 100%;\n  margin-bottom: 0;\n  padding: 0.5em;\n  box-sizing: border-box;\n  text-align: center;\n}\n\n#sk-container-id-4 label.sk-toggleable__label-arrow:before {\n  /* Arrow on the left of the label */\n  content: \"▸\";\n  float: left;\n  margin-right: 0.25em;\n  color: var(--sklearn-color-icon);\n}\n\n#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {\n  color: var(--sklearn-color-text);\n}\n\n/* Toggleable content - dropdown */\n\n#sk-container-id-4 div.sk-toggleable__content {\n  max-height: 0;\n  max-width: 0;\n  overflow: hidden;\n  text-align: left;\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-4 div.sk-toggleable__content.fitted {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n#sk-container-id-4 div.sk-toggleable__content pre {\n  margin: 0.2em;\n  border-radius: 0.25em;\n  color: var(--sklearn-color-text);\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-4 div.sk-toggleable__content.fitted pre {\n  /* unfitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n  /* Expand drop-down */\n  max-height: 200px;\n  max-width: 100%;\n  overflow: auto;\n}\n\n#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n  content: \"▾\";\n}\n\n/* Pipeline/ColumnTransformer-specific style */\n\n#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-4 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Estimator-specific style */\n\n/* Colorize estimator box */\n#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-4 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n#sk-container-id-4 div.sk-label label.sk-toggleable__label,\n#sk-container-id-4 div.sk-label label {\n  /* The background is the default theme color */\n  color: var(--sklearn-color-text-on-default-background);\n}\n\n/* On hover, darken the color of the background */\n#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n/* Label box, darken color on hover, fitted */\n#sk-container-id-4 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Estimator label */\n\n#sk-container-id-4 div.sk-label label {\n  font-family: monospace;\n  font-weight: bold;\n  display: inline-block;\n  line-height: 1.2em;\n}\n\n#sk-container-id-4 div.sk-label-container {\n  text-align: center;\n}\n\n/* Estimator-specific */\n#sk-container-id-4 div.sk-estimator {\n  font-family: monospace;\n  border: 1px dotted var(--sklearn-color-border-box);\n  border-radius: 0.25em;\n  box-sizing: border-box;\n  margin-bottom: 0.5em;\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-4 div.sk-estimator.fitted {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n/* on hover */\n#sk-container-id-4 div.sk-estimator:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-4 div.sk-estimator.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Specification for estimator info (e.g. \"i\" and \"?\") */\n\n/* Common style for \"i\" and \"?\" */\n\n.sk-estimator-doc-link,\na:link.sk-estimator-doc-link,\na:visited.sk-estimator-doc-link {\n  float: right;\n  font-size: smaller;\n  line-height: 1em;\n  font-family: monospace;\n  background-color: var(--sklearn-color-background);\n  border-radius: 1em;\n  height: 1em;\n  width: 1em;\n  text-decoration: none !important;\n  margin-left: 1ex;\n  /* unfitted */\n  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n  color: var(--sklearn-color-unfitted-level-1);\n}\n\n.sk-estimator-doc-link.fitted,\na:link.sk-estimator-doc-link.fitted,\na:visited.sk-estimator-doc-link.fitted {\n  /* fitted */\n  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n  color: var(--sklearn-color-fitted-level-1);\n}\n\n/* On hover */\ndiv.sk-estimator:hover .sk-estimator-doc-link:hover,\n.sk-estimator-doc-link:hover,\ndiv.sk-label-container:hover .sk-estimator-doc-link:hover,\n.sk-estimator-doc-link:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\ndiv.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n.sk-estimator-doc-link.fitted:hover,\ndiv.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n.sk-estimator-doc-link.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\n/* Span, style for the box shown on hovering the info icon */\n.sk-estimator-doc-link span {\n  display: none;\n  z-index: 9999;\n  position: relative;\n  font-weight: normal;\n  right: .2ex;\n  padding: .5ex;\n  margin: .5ex;\n  width: min-content;\n  min-width: 20ex;\n  max-width: 50ex;\n  color: var(--sklearn-color-text);\n  box-shadow: 2pt 2pt 4pt #999;\n  /* unfitted */\n  background: var(--sklearn-color-unfitted-level-0);\n  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n}\n\n.sk-estimator-doc-link.fitted span {\n  /* fitted */\n  background: var(--sklearn-color-fitted-level-0);\n  border: var(--sklearn-color-fitted-level-3);\n}\n\n.sk-estimator-doc-link:hover span {\n  display: block;\n}\n\n/* \"?\"-specific style due to the `<a>` HTML tag */\n\n#sk-container-id-4 a.estimator_doc_link {\n  float: right;\n  font-size: 1rem;\n  line-height: 1em;\n  font-family: monospace;\n  background-color: var(--sklearn-color-background);\n  border-radius: 1rem;\n  height: 1rem;\n  width: 1rem;\n  text-decoration: none;\n  /* unfitted */\n  color: var(--sklearn-color-unfitted-level-1);\n  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n}\n\n#sk-container-id-4 a.estimator_doc_link.fitted {\n  /* fitted */\n  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n  color: var(--sklearn-color-fitted-level-1);\n}\n\n/* On hover */\n#sk-container-id-4 a.estimator_doc_link:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\n#sk-container-id-4 a.estimator_doc_link.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-3);\n}\n</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;model&#x27;,\n                 KerasRegressor(batch_size=1, build_fn=&lt;function create_lstm_model at 0x7876cd4b7520&gt;, epochs=2, verbose=2))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-7\" type=\"checkbox\" ><label for=\"sk-estimator-id-7\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;Pipeline<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.pipeline.Pipeline.html\">?<span>Documentation for Pipeline</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>Pipeline(steps=[(&#x27;model&#x27;,\n                 KerasRegressor(batch_size=1, build_fn=&lt;function create_lstm_model at 0x7876cd4b7520&gt;, epochs=2, verbose=2))])</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-8\" type=\"checkbox\" ><label for=\"sk-estimator-id-8\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">KerasRegressor</label><div class=\"sk-toggleable__content fitted\"><pre>KerasRegressor(\n\tmodel=None\n\tbuild_fn=&lt;function create_lstm_model at 0x7876cd4b7520&gt;\n\twarm_start=False\n\trandom_state=None\n\toptimizer=rmsprop\n\tloss=None\n\tmetrics=None\n\tbatch_size=1\n\tvalidation_batch_size=None\n\tverbose=2\n\tcallbacks=None\n\tvalidation_split=0.0\n\tshuffle=True\n\trun_eagerly=False\n\tepochs=2\n)</pre></div> </div></div></div></div></div></div>"},"metadata":{}}]},{"cell_type":"code","source":"predictions=pipe.predict(test)\npredictions.shape\n","metadata":{"execution":{"iopub.status.busy":"2024-04-13T16:21:49.837201Z","iopub.execute_input":"2024-04-13T16:21:49.837578Z","iopub.status.idle":"2024-04-13T16:22:05.423719Z","shell.execute_reply.started":"2024-04-13T16:21:49.837547Z","shell.execute_reply":"2024-04-13T16:22:05.422254Z"},"trusted":true},"execution_count":62,"outputs":[{"name":"stdout","text":"1018/1018 - 15s - 15ms/step\n","output_type":"stream"},{"execution_count":62,"output_type":"execute_result","data":{"text/plain":"(1018,)"},"metadata":{}}]},{"cell_type":"code","source":"predictions=predictions.reshape(-1, 1)","metadata":{"execution":{"iopub.status.busy":"2024-04-13T16:22:05.425331Z","iopub.execute_input":"2024-04-13T16:22:05.425752Z","iopub.status.idle":"2024-04-13T16:22:05.431080Z","shell.execute_reply.started":"2024-04-13T16:22:05.425714Z","shell.execute_reply":"2024-04-13T16:22:05.429652Z"},"trusted":true},"execution_count":63,"outputs":[]},{"cell_type":"code","source":"scaler = MinMaxScaler(feature_range=(0,1))\nscaled_data = scaler.fit_transform(dataset1)\n\nscaled_data","metadata":{"execution":{"iopub.status.busy":"2024-04-13T16:22:05.435515Z","iopub.execute_input":"2024-04-13T16:22:05.435880Z","iopub.status.idle":"2024-04-13T16:22:05.455897Z","shell.execute_reply.started":"2024-04-13T16:22:05.435848Z","shell.execute_reply":"2024-04-13T16:22:05.454791Z"},"trusted":true},"execution_count":64,"outputs":[{"execution_count":64,"output_type":"execute_result","data":{"text/plain":"array([[0.03033118],\n       [0.02974378],\n       [0.03179078],\n       ...,\n       [0.84600573],\n       [0.8520294 ],\n       [0.86122352]])"},"metadata":{}}]},{"cell_type":"code","source":"predictions = scaler.inverse_transform(predictions)","metadata":{"execution":{"iopub.status.busy":"2024-04-13T16:22:05.457550Z","iopub.execute_input":"2024-04-13T16:22:05.457977Z","iopub.status.idle":"2024-04-13T16:22:05.469097Z","shell.execute_reply.started":"2024-04-13T16:22:05.457935Z","shell.execute_reply":"2024-04-13T16:22:05.467820Z"},"trusted":true},"execution_count":65,"outputs":[]},{"cell_type":"code","source":"predictions","metadata":{"execution":{"iopub.status.busy":"2024-04-13T16:22:05.470411Z","iopub.execute_input":"2024-04-13T16:22:05.470769Z","iopub.status.idle":"2024-04-13T16:22:05.485627Z","shell.execute_reply.started":"2024-04-13T16:22:05.470740Z","shell.execute_reply":"2024-04-13T16:22:05.484410Z"},"trusted":true},"execution_count":66,"outputs":[{"execution_count":66,"output_type":"execute_result","data":{"text/plain":"array([[ 40.58971],\n       [ 41.07764],\n       [ 41.77686],\n       ...,\n       [117.21965],\n       [118.42967],\n       [119.39608]], dtype=float32)"},"metadata":{}}]},{"cell_type":"code","source":"rmse = np.sqrt(np.mean(((predictions - y_test) ** 2)))\nrmse","metadata":{"execution":{"iopub.status.busy":"2024-04-13T16:22:05.487201Z","iopub.execute_input":"2024-04-13T16:22:05.488190Z","iopub.status.idle":"2024-04-13T16:22:05.497440Z","shell.execute_reply.started":"2024-04-13T16:22:05.488153Z","shell.execute_reply":"2024-04-13T16:22:05.496336Z"},"trusted":true},"execution_count":67,"outputs":[{"execution_count":67,"output_type":"execute_result","data":{"text/plain":"9.965636597226622"},"metadata":{}}]},{"cell_type":"code","source":"training_data_len=int(np.ceil( len(dataset1) * .83 ))\ntraining_data_len","metadata":{"execution":{"iopub.status.busy":"2024-04-13T16:22:05.499062Z","iopub.execute_input":"2024-04-13T16:22:05.500003Z","iopub.status.idle":"2024-04-13T16:22:05.512073Z","shell.execute_reply.started":"2024-04-13T16:22:05.499961Z","shell.execute_reply":"2024-04-13T16:22:05.511159Z"},"trusted":true},"execution_count":68,"outputs":[{"execution_count":68,"output_type":"execute_result","data":{"text/plain":"4975"},"metadata":{}}]},{"cell_type":"code","source":"\n# train = data1[:int(training_data_len)]\n# valid = data1[int(trainig_data_len):]\n\n# valid['Predictions'] = predictions","metadata":{"execution":{"iopub.status.busy":"2024-04-13T16:22:05.513349Z","iopub.execute_input":"2024-04-13T16:22:05.513700Z","iopub.status.idle":"2024-04-13T16:22:05.524581Z","shell.execute_reply.started":"2024-04-13T16:22:05.513649Z","shell.execute_reply":"2024-04-13T16:22:05.523141Z"},"trusted":true},"execution_count":69,"outputs":[]},{"cell_type":"code","source":"train = data1[:4196]\nvalid = data1[4196:]","metadata":{"execution":{"iopub.status.busy":"2024-04-13T16:22:05.526444Z","iopub.execute_input":"2024-04-13T16:22:05.526907Z","iopub.status.idle":"2024-04-13T16:22:05.538725Z","shell.execute_reply.started":"2024-04-13T16:22:05.526867Z","shell.execute_reply":"2024-04-13T16:22:05.537537Z"},"trusted":true},"execution_count":70,"outputs":[]},{"cell_type":"code","source":"trainig_data_len=int(np.ceil( len(dataset1) * .83 ))\ntrain = data1[:trainig_data_len]\nvalid = data1[trainig_data_len:]\nvalid['Predictions'] = predictions\n# Visualize the data\nplt.figure(figsize=(16,6))\nplt.title('Model')\nplt.xlabel('Date', fontsize=18)\nplt.ylabel('Close Price USD ($)', fontsize=18)\nplt.plot(train['Close'])\nplt.plot(valid[['Close', 'Predictions']])\nplt.legend(['Train', 'Val', 'Predictions'], loc='lower right')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-04-13T16:22:05.540501Z","iopub.execute_input":"2024-04-13T16:22:05.541968Z","iopub.status.idle":"2024-04-13T16:22:06.052149Z","shell.execute_reply.started":"2024-04-13T16:22:05.541925Z","shell.execute_reply":"2024-04-13T16:22:06.050783Z"},"trusted":true},"execution_count":71,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_378/1499160943.py:4: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  valid['Predictions'] = predictions\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1600x600 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"# Define the list of stock symbols\nstock_symbols = ['HDFCBANK.NS', 'TCS.NS', 'ICICIBANK.NS', 'INFY.NS', 'ADANIPOWER.NS',\n                 'BAJFINANCE.NS', 'MARUTI.NS', 'HINDUNILVR.NS', 'ASIANPAINT.NS',\n                 'DRREDDY.NS', 'LTIM.NS', 'EICHERMOT.NS', 'CHOLAFIN.NS',\n                 'IDFCFIRSTB.NS', 'ASHOKLEY.NS', 'GESHIP.NS', 'SBICARD.NS',\n                 'BRITANNIA.NS', 'IIFL.NS']\n\n# Download historical data for each stock\nstock_data = {}\nfor symbol in stock_symbols:\n    data = yf.download(symbol, start='2000-01-01', end='2024-01-01')\n    stock_data[symbol] = data\n\n# Extract close prices for each stock\nclose_prices = {}\nfor symbol, data in stock_data.items():\n    close_prices[symbol] = data['Close']\n\n# Create DataFrames for each stock\nstock_dfs = {}\nfor symbol, prices in close_prices.items():\n    stock_dfs[symbol] = pd.DataFrame({'Close': prices})\n\n# Convert close prices of each stock DataFrame into NumPy arrays\nstock_arrays = {}\nfor symbol, df in stock_dfs.items():\n    stock_arrays[symbol] = df['Close'].values\n    stock_arrays[symbol]=stock_arrays[symbol].reshape(-1,1)\n\n# Now you have the close price arrays for each stock in the stock_arrays dictionary\n","metadata":{"execution":{"iopub.status.busy":"2024-04-13T16:22:06.053646Z","iopub.execute_input":"2024-04-13T16:22:06.054061Z","iopub.status.idle":"2024-04-13T16:22:07.986342Z","shell.execute_reply.started":"2024-04-13T16:22:06.054019Z","shell.execute_reply":"2024-04-13T16:22:07.984843Z"},"trusted":true},"execution_count":72,"outputs":[{"name":"stderr","text":"[*********************100%%**********************]  1 of 1 completed\n[*********************100%%**********************]  1 of 1 completed\n[*********************100%%**********************]  1 of 1 completed\n[*********************100%%**********************]  1 of 1 completed\n[*********************100%%**********************]  1 of 1 completed\n[*********************100%%**********************]  1 of 1 completed\n[*********************100%%**********************]  1 of 1 completed\n[*********************100%%**********************]  1 of 1 completed\n[*********************100%%**********************]  1 of 1 completed\n[*********************100%%**********************]  1 of 1 completed\n[*********************100%%**********************]  1 of 1 completed\n[*********************100%%**********************]  1 of 1 completed\n[*********************100%%**********************]  1 of 1 completed\n[*********************100%%**********************]  1 of 1 completed\n[*********************100%%**********************]  1 of 1 completed\n[*********************100%%**********************]  1 of 1 completed\n[*********************100%%**********************]  1 of 1 completed\n[*********************100%%**********************]  1 of 1 completed\n[*********************100%%**********************]  1 of 1 completed\n","output_type":"stream"}]},{"cell_type":"code","source":"stock_arrays['TCS.NS']","metadata":{"execution":{"iopub.status.busy":"2024-04-13T16:22:07.988162Z","iopub.execute_input":"2024-04-13T16:22:07.988804Z","iopub.status.idle":"2024-04-13T16:22:07.996246Z","shell.execute_reply.started":"2024-04-13T16:22:07.988771Z","shell.execute_reply":"2024-04-13T16:22:07.994960Z"},"trusted":true},"execution_count":73,"outputs":[{"execution_count":73,"output_type":"execute_result","data":{"text/plain":"array([[  39.70000076],\n       [  39.16249847],\n       [  36.46250153],\n       ...,\n       [3811.19995117],\n       [3799.89990234],\n       [3793.39990234]])"},"metadata":{}}]},{"cell_type":"code","source":"stock_data_dict = {}\n\nfor stock in stock_arrays.keys():\n    stock_arrays[stock]=stock_arrays[stock].reshape(-1,1)\n    # Fit the preprocessor pipeline to the current stock's data\n    preprocess_pipe.fit(stock_arrays[stock])","metadata":{"execution":{"iopub.status.busy":"2024-04-13T16:22:07.997866Z","iopub.execute_input":"2024-04-13T16:22:07.999072Z","iopub.status.idle":"2024-04-13T16:22:08.012228Z","shell.execute_reply.started":"2024-04-13T16:22:07.999039Z","shell.execute_reply":"2024-04-13T16:22:08.010993Z"},"trusted":true},"execution_count":74,"outputs":[]},{"cell_type":"code","source":"for stock in stock_arrays.keys():\n    # Transform the data\n    x_transformed, y_transformed, x_test, y_test = preprocess_pipe.transform(stock_arrays[stock])\n    stock_data_dict[stock] = {\n        'x_transformed': x_transformed,\n        'y_transformed': y_transformed,\n        'x_test': x_test,\n        'y_test': y_test}","metadata":{"execution":{"iopub.status.busy":"2024-04-13T16:22:08.013848Z","iopub.execute_input":"2024-04-13T16:22:08.014327Z","iopub.status.idle":"2024-04-13T16:31:46.875083Z","shell.execute_reply.started":"2024-04-13T16:22:08.014296Z","shell.execute_reply":"2024-04-13T16:31:46.873540Z"},"trusted":true},"execution_count":75,"outputs":[]},{"cell_type":"code","source":"type(stock_data_dict['IIFL.NS']['x_test'])","metadata":{"execution":{"iopub.status.busy":"2024-04-13T16:36:00.558800Z","iopub.execute_input":"2024-04-13T16:36:00.559252Z","iopub.status.idle":"2024-04-13T16:36:00.569870Z","shell.execute_reply.started":"2024-04-13T16:36:00.559217Z","shell.execute_reply":"2024-04-13T16:36:00.568453Z"},"trusted":true},"execution_count":81,"outputs":[{"execution_count":81,"output_type":"execute_result","data":{"text/plain":"array([[[0.62213616],\n        [0.64943102],\n        [0.65054094],\n        ...,\n        [0.73429487],\n        [0.74013647],\n        [0.72927111]],\n\n       [[0.64943102],\n        [0.65054094],\n        [0.64690456],\n        ...,\n        [0.74013647],\n        [0.72927111],\n        [0.73298051]],\n\n       [[0.65054094],\n        [0.64690456],\n        [0.6409023 ],\n        ...,\n        [0.72927111],\n        [0.73298051],\n        [0.73528798]],\n\n       ...,\n\n       [[0.88237941],\n        [0.88053929],\n        [0.88205817],\n        ...,\n        [0.97575736],\n        [0.96649844],\n        [0.97327468]],\n\n       [[0.88053929],\n        [0.88205817],\n        [0.87139725],\n        ...,\n        [0.96649844],\n        [0.97327468],\n        [0.98545447]],\n\n       [[0.88205817],\n        [0.87139725],\n        [0.88395669],\n        ...,\n        [0.97327468],\n        [0.98545447],\n        [0.98659356]]])"},"metadata":{}}]},{"cell_type":"code","source":"for stock in stock_arrays.keys():\n    x_transformed = stock_data_dict[stock]['x_transformed']\n    y_transformed = stock_data_dict[stock]['y_transformed']\n    print(\"Loss for\", stock)\n    print()\n    predictions = pipe.fit(x_transformed,y_transformed)\n    stock_data_dict[stock] = {\n        'predictions': predictions\n    }","metadata":{"execution":{"iopub.status.busy":"2024-04-13T16:52:56.461239Z","iopub.execute_input":"2024-04-13T16:52:56.462554Z","iopub.status.idle":"2024-04-13T18:35:50.616369Z","shell.execute_reply.started":"2024-04-13T16:52:56.462499Z","shell.execute_reply":"2024-04-13T18:35:50.615215Z"},"trusted":true},"execution_count":92,"outputs":[{"name":"stdout","text":"Loss for HDFCBANK.NS\n\nEpoch 1/2\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n  X, y = self._initialize(X, y)\n/opt/conda/lib/python3.10/site-packages/keras/src/layers/rnn/rnn.py:204: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n  super().__init__(**kwargs)\n","output_type":"stream"},{"name":"stdout","text":"4915/4915 - 183s - 37ms/step - loss: 4.3307e-04\nEpoch 2/2\n4915/4915 - 202s - 41ms/step - loss: 1.5215e-04\nLoss for TCS.NS\n\nEpoch 1/2\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n  X, y = self._initialize(X, y)\n/opt/conda/lib/python3.10/site-packages/keras/src/layers/rnn/rnn.py:204: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n  super().__init__(**kwargs)\n","output_type":"stream"},{"name":"stdout","text":"4349/4349 - 162s - 37ms/step - loss: 2.9775e-04\nEpoch 2/2\n4349/4349 - 161s - 37ms/step - loss: 1.3177e-04\nLoss for ICICIBANK.NS\n\nEpoch 1/2\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n  X, y = self._initialize(X, y)\n/opt/conda/lib/python3.10/site-packages/keras/src/layers/rnn/rnn.py:204: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n  super().__init__(**kwargs)\n","output_type":"stream"},{"name":"stdout","text":"4373/4373 - 163s - 37ms/step - loss: 2.3066e-04\nEpoch 2/2\n4373/4373 - 203s - 46ms/step - loss: 1.0458e-04\nLoss for INFY.NS\n\nEpoch 1/2\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n  X, y = self._initialize(X, y)\n/opt/conda/lib/python3.10/site-packages/keras/src/layers/rnn/rnn.py:204: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n  super().__init__(**kwargs)\n","output_type":"stream"},{"name":"stdout","text":"4915/4915 - 183s - 37ms/step - loss: 1.7550e-04\nEpoch 2/2\n4915/4915 - 181s - 37ms/step - loss: 6.8214e-05\nLoss for ADANIPOWER.NS\n\nEpoch 1/2\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n  X, y = self._initialize(X, y)\n/opt/conda/lib/python3.10/site-packages/keras/src/layers/rnn/rnn.py:204: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n  super().__init__(**kwargs)\n","output_type":"stream"},{"name":"stdout","text":"2881/2881 - 137s - 48ms/step - loss: 1.2566e-04\nEpoch 2/2\n2881/2881 - 142s - 49ms/step - loss: 4.9686e-05\nLoss for BAJFINANCE.NS\n\nEpoch 1/2\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n  X, y = self._initialize(X, y)\n/opt/conda/lib/python3.10/site-packages/keras/src/layers/rnn/rnn.py:204: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n  super().__init__(**kwargs)\n","output_type":"stream"},{"name":"stdout","text":"4373/4373 - 164s - 38ms/step - loss: 3.8417e-04\nEpoch 2/2\n4373/4373 - 201s - 46ms/step - loss: 1.4225e-04\nLoss for MARUTI.NS\n\nEpoch 1/2\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n  X, y = self._initialize(X, y)\n/opt/conda/lib/python3.10/site-packages/keras/src/layers/rnn/rnn.py:204: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n  super().__init__(**kwargs)\n","output_type":"stream"},{"name":"stdout","text":"4154/4154 - 157s - 38ms/step - loss: 7.6258e-04\nEpoch 2/2\n4154/4154 - 201s - 48ms/step - loss: 5.0109e-04\nLoss for HINDUNILVR.NS\n\nEpoch 1/2\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n  X, y = self._initialize(X, y)\n/opt/conda/lib/python3.10/site-packages/keras/src/layers/rnn/rnn.py:204: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n  super().__init__(**kwargs)\n","output_type":"stream"},{"name":"stdout","text":"4915/4915 - 185s - 38ms/step - loss: 3.9641e-04\nEpoch 2/2\n4915/4915 - 182s - 37ms/step - loss: 1.4592e-04\nLoss for ASIANPAINT.NS\n\nEpoch 1/2\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n  X, y = self._initialize(X, y)\n/opt/conda/lib/python3.10/site-packages/keras/src/layers/rnn/rnn.py:204: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n  super().__init__(**kwargs)\n","output_type":"stream"},{"name":"stdout","text":"4373/4373 - 166s - 38ms/step - loss: 3.3706e-04\nEpoch 2/2\n4373/4373 - 201s - 46ms/step - loss: 1.0920e-04\nLoss for DRREDDY.NS\n\nEpoch 1/2\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n  X, y = self._initialize(X, y)\n/opt/conda/lib/python3.10/site-packages/keras/src/layers/rnn/rnn.py:204: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n  super().__init__(**kwargs)\n","output_type":"stream"},{"name":"stdout","text":"4912/4912 - 185s - 38ms/step - loss: 4.0875e-04\nEpoch 2/2\n4912/4912 - 203s - 41ms/step - loss: 1.7631e-04\nLoss for LTIM.NS\n\nEpoch 1/2\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n  X, y = self._initialize(X, y)\n/opt/conda/lib/python3.10/site-packages/keras/src/layers/rnn/rnn.py:204: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n  super().__init__(**kwargs)\n","output_type":"stream"},{"name":"stdout","text":"1467/1467 - 58s - 39ms/step - loss: 0.0022\nEpoch 2/2\n1467/1467 - 81s - 55ms/step - loss: 7.9445e-04\nLoss for EICHERMOT.NS\n\nEpoch 1/2\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n  X, y = self._initialize(X, y)\n/opt/conda/lib/python3.10/site-packages/keras/src/layers/rnn/rnn.py:204: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n  super().__init__(**kwargs)\n","output_type":"stream"},{"name":"stdout","text":"4912/4912 - 185s - 38ms/step - loss: 6.5475e-04\nEpoch 2/2\n4912/4912 - 203s - 41ms/step - loss: 2.0006e-04\nLoss for CHOLAFIN.NS\n\nEpoch 1/2\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n  X, y = self._initialize(X, y)\n/opt/conda/lib/python3.10/site-packages/keras/src/layers/rnn/rnn.py:204: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n  super().__init__(**kwargs)\n","output_type":"stream"},{"name":"stdout","text":"4373/4373 - 168s - 38ms/step - loss: 1.1898e-04\nEpoch 2/2\n4373/4373 - 167s - 38ms/step - loss: 4.6606e-05\nLoss for IDFCFIRSTB.NS\n\nEpoch 1/2\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n  X, y = self._initialize(X, y)\n/opt/conda/lib/python3.10/site-packages/keras/src/layers/rnn/rnn.py:204: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n  super().__init__(**kwargs)\n","output_type":"stream"},{"name":"stdout","text":"1610/1610 - 63s - 39ms/step - loss: 0.0016\nEpoch 2/2\n1610/1610 - 82s - 51ms/step - loss: 5.6583e-04\nLoss for ASHOKLEY.NS\n\nEpoch 1/2\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n  X, y = self._initialize(X, y)\n/opt/conda/lib/python3.10/site-packages/keras/src/layers/rnn/rnn.py:204: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n  super().__init__(**kwargs)\n","output_type":"stream"},{"name":"stdout","text":"4374/4374 - 165s - 38ms/step - loss: 6.2020e-04\nEpoch 2/2\n4374/4374 - 201s - 46ms/step - loss: 3.2868e-04\nLoss for GESHIP.NS\n\nEpoch 1/2\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n  X, y = self._initialize(X, y)\n/opt/conda/lib/python3.10/site-packages/keras/src/layers/rnn/rnn.py:204: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n  super().__init__(**kwargs)\n","output_type":"stream"},{"name":"stdout","text":"4375/4375 - 165s - 38ms/step - loss: 3.2287e-04\nEpoch 2/2\n4375/4375 - 162s - 37ms/step - loss: 1.4405e-04\nLoss for SBICARD.NS\n\nEpoch 1/2\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n  X, y = self._initialize(X, y)\n/opt/conda/lib/python3.10/site-packages/keras/src/layers/rnn/rnn.py:204: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n  super().__init__(**kwargs)\n","output_type":"stream"},{"name":"stdout","text":"722/722 - 30s - 41ms/step - loss: 0.0067\nEpoch 2/2\n722/722 - 41s - 57ms/step - loss: 0.0028\nLoss for BRITANNIA.NS\n\nEpoch 1/2\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n  X, y = self._initialize(X, y)\n/opt/conda/lib/python3.10/site-packages/keras/src/layers/rnn/rnn.py:204: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n  super().__init__(**kwargs)\n","output_type":"stream"},{"name":"stdout","text":"4915/4915 - 184s - 38ms/step - loss: 4.0687e-04\nEpoch 2/2\n4915/4915 - 182s - 37ms/step - loss: 1.1330e-04\nLoss for IIFL.NS\n\nEpoch 1/2\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n  X, y = self._initialize(X, y)\n/opt/conda/lib/python3.10/site-packages/keras/src/layers/rnn/rnn.py:204: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n  super().__init__(**kwargs)\n","output_type":"stream"},{"name":"stdout","text":"3755/3755 - 142s - 38ms/step - loss: 5.9169e-04\nEpoch 2/2\n3755/3755 - 141s - 38ms/step - loss: 2.5591e-04\n","output_type":"stream"}]},{"cell_type":"code","source":"stock_data_dict['IIFL.NS']['x_test']","metadata":{"execution":{"iopub.status.busy":"2024-04-13T18:44:12.881093Z","iopub.execute_input":"2024-04-13T18:44:12.881587Z","iopub.status.idle":"2024-04-13T18:44:12.930321Z","shell.execute_reply.started":"2024-04-13T18:44:12.881551Z","shell.execute_reply":"2024-04-13T18:44:12.928774Z"},"trusted":true},"execution_count":97,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","Cell \u001b[0;32mIn[97], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[43mstock_data_dict\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mIIFL.NS\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mx_test\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m]\u001b[49m\n","\u001b[0;31mKeyError\u001b[0m: 'x_test'"],"ename":"KeyError","evalue":"'x_test'","output_type":"error"}]},{"cell_type":"code","source":"for stock in stock_arrays.keys():\n    x_test = stock_data_dict[stock]['x_test']\n#     y_transformed = stock_data_dict[stock]['y_transformed']\n    predictions = pipe.predict(x_test)\n    stock_data_dict[stock] = {\n        'predictions': predictions\n    }","metadata":{"execution":{"iopub.status.busy":"2024-04-13T18:39:45.608364Z","iopub.execute_input":"2024-04-13T18:39:45.608849Z","iopub.status.idle":"2024-04-13T18:39:45.661745Z","shell.execute_reply.started":"2024-04-13T18:39:45.608811Z","shell.execute_reply":"2024-04-13T18:39:45.660120Z"},"trusted":true},"execution_count":95,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","Cell \u001b[0;32mIn[95], line 2\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m stock \u001b[38;5;129;01min\u001b[39;00m stock_arrays\u001b[38;5;241m.\u001b[39mkeys():\n\u001b[0;32m----> 2\u001b[0m     x_test \u001b[38;5;241m=\u001b[39m \u001b[43mstock_data_dict\u001b[49m\u001b[43m[\u001b[49m\u001b[43mstock\u001b[49m\u001b[43m]\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mx_test\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m]\u001b[49m\n\u001b[1;32m      3\u001b[0m \u001b[38;5;66;03m#     y_transformed = stock_data_dict[stock]['y_transformed']\u001b[39;00m\n\u001b[1;32m      4\u001b[0m     predictions \u001b[38;5;241m=\u001b[39m pipe\u001b[38;5;241m.\u001b[39mpredict(x_test)\n","\u001b[0;31mKeyError\u001b[0m: 'x_test'"],"ename":"KeyError","evalue":"'x_test'","output_type":"error"}]},{"cell_type":"code","source":"predictions1 = stock_data_dict['IIFL.NS']['predictions']\npredictions1","metadata":{"execution":{"iopub.status.busy":"2024-04-13T18:37:48.532004Z","iopub.execute_input":"2024-04-13T18:37:48.532724Z","iopub.status.idle":"2024-04-13T18:37:48.544512Z","shell.execute_reply.started":"2024-04-13T18:37:48.532689Z","shell.execute_reply":"2024-04-13T18:37:48.543534Z"},"trusted":true},"execution_count":94,"outputs":[{"execution_count":94,"output_type":"execute_result","data":{"text/plain":"Pipeline(steps=[('model',\n                 KerasRegressor(batch_size=1, build_fn=<function create_lstm_model at 0x7876cd4b7520>, epochs=2, verbose=2))])","text/html":"<style>#sk-container-id-6 {\n  /* Definition of color scheme common for light and dark mode */\n  --sklearn-color-text: black;\n  --sklearn-color-line: gray;\n  /* Definition of color scheme for unfitted estimators */\n  --sklearn-color-unfitted-level-0: #fff5e6;\n  --sklearn-color-unfitted-level-1: #f6e4d2;\n  --sklearn-color-unfitted-level-2: #ffe0b3;\n  --sklearn-color-unfitted-level-3: chocolate;\n  /* Definition of color scheme for fitted estimators */\n  --sklearn-color-fitted-level-0: #f0f8ff;\n  --sklearn-color-fitted-level-1: #d4ebff;\n  --sklearn-color-fitted-level-2: #b3dbfd;\n  --sklearn-color-fitted-level-3: cornflowerblue;\n\n  /* Specific color for light theme */\n  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n  --sklearn-color-icon: #696969;\n\n  @media (prefers-color-scheme: dark) {\n    /* Redefinition of color scheme for dark theme */\n    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n    --sklearn-color-icon: #878787;\n  }\n}\n\n#sk-container-id-6 {\n  color: var(--sklearn-color-text);\n}\n\n#sk-container-id-6 pre {\n  padding: 0;\n}\n\n#sk-container-id-6 input.sk-hidden--visually {\n  border: 0;\n  clip: rect(1px 1px 1px 1px);\n  clip: rect(1px, 1px, 1px, 1px);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  width: 1px;\n}\n\n#sk-container-id-6 div.sk-dashed-wrapped {\n  border: 1px dashed var(--sklearn-color-line);\n  margin: 0 0.4em 0.5em 0.4em;\n  box-sizing: border-box;\n  padding-bottom: 0.4em;\n  background-color: var(--sklearn-color-background);\n}\n\n#sk-container-id-6 div.sk-container {\n  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n     but bootstrap.min.css set `[hidden] { display: none !important; }`\n     so we also need the `!important` here to be able to override the\n     default hidden behavior on the sphinx rendered scikit-learn.org.\n     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n  display: inline-block !important;\n  position: relative;\n}\n\n#sk-container-id-6 div.sk-text-repr-fallback {\n  display: none;\n}\n\ndiv.sk-parallel-item,\ndiv.sk-serial,\ndiv.sk-item {\n  /* draw centered vertical line to link estimators */\n  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n  background-size: 2px 100%;\n  background-repeat: no-repeat;\n  background-position: center center;\n}\n\n/* Parallel-specific style estimator block */\n\n#sk-container-id-6 div.sk-parallel-item::after {\n  content: \"\";\n  width: 100%;\n  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n  flex-grow: 1;\n}\n\n#sk-container-id-6 div.sk-parallel {\n  display: flex;\n  align-items: stretch;\n  justify-content: center;\n  background-color: var(--sklearn-color-background);\n  position: relative;\n}\n\n#sk-container-id-6 div.sk-parallel-item {\n  display: flex;\n  flex-direction: column;\n}\n\n#sk-container-id-6 div.sk-parallel-item:first-child::after {\n  align-self: flex-end;\n  width: 50%;\n}\n\n#sk-container-id-6 div.sk-parallel-item:last-child::after {\n  align-self: flex-start;\n  width: 50%;\n}\n\n#sk-container-id-6 div.sk-parallel-item:only-child::after {\n  width: 0;\n}\n\n/* Serial-specific style estimator block */\n\n#sk-container-id-6 div.sk-serial {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background-color: var(--sklearn-color-background);\n  padding-right: 1em;\n  padding-left: 1em;\n}\n\n\n/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\nclickable and can be expanded/collapsed.\n- Pipeline and ColumnTransformer use this feature and define the default style\n- Estimators will overwrite some part of the style using the `sk-estimator` class\n*/\n\n/* Pipeline and ColumnTransformer style (default) */\n\n#sk-container-id-6 div.sk-toggleable {\n  /* Default theme specific background. It is overwritten whether we have a\n  specific estimator or a Pipeline/ColumnTransformer */\n  background-color: var(--sklearn-color-background);\n}\n\n/* Toggleable label */\n#sk-container-id-6 label.sk-toggleable__label {\n  cursor: pointer;\n  display: block;\n  width: 100%;\n  margin-bottom: 0;\n  padding: 0.5em;\n  box-sizing: border-box;\n  text-align: center;\n}\n\n#sk-container-id-6 label.sk-toggleable__label-arrow:before {\n  /* Arrow on the left of the label */\n  content: \"▸\";\n  float: left;\n  margin-right: 0.25em;\n  color: var(--sklearn-color-icon);\n}\n\n#sk-container-id-6 label.sk-toggleable__label-arrow:hover:before {\n  color: var(--sklearn-color-text);\n}\n\n/* Toggleable content - dropdown */\n\n#sk-container-id-6 div.sk-toggleable__content {\n  max-height: 0;\n  max-width: 0;\n  overflow: hidden;\n  text-align: left;\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-6 div.sk-toggleable__content.fitted {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n#sk-container-id-6 div.sk-toggleable__content pre {\n  margin: 0.2em;\n  border-radius: 0.25em;\n  color: var(--sklearn-color-text);\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-6 div.sk-toggleable__content.fitted pre {\n  /* unfitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n#sk-container-id-6 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n  /* Expand drop-down */\n  max-height: 200px;\n  max-width: 100%;\n  overflow: auto;\n}\n\n#sk-container-id-6 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n  content: \"▾\";\n}\n\n/* Pipeline/ColumnTransformer-specific style */\n\n#sk-container-id-6 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-6 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Estimator-specific style */\n\n/* Colorize estimator box */\n#sk-container-id-6 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-6 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n#sk-container-id-6 div.sk-label label.sk-toggleable__label,\n#sk-container-id-6 div.sk-label label {\n  /* The background is the default theme color */\n  color: var(--sklearn-color-text-on-default-background);\n}\n\n/* On hover, darken the color of the background */\n#sk-container-id-6 div.sk-label:hover label.sk-toggleable__label {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n/* Label box, darken color on hover, fitted */\n#sk-container-id-6 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Estimator label */\n\n#sk-container-id-6 div.sk-label label {\n  font-family: monospace;\n  font-weight: bold;\n  display: inline-block;\n  line-height: 1.2em;\n}\n\n#sk-container-id-6 div.sk-label-container {\n  text-align: center;\n}\n\n/* Estimator-specific */\n#sk-container-id-6 div.sk-estimator {\n  font-family: monospace;\n  border: 1px dotted var(--sklearn-color-border-box);\n  border-radius: 0.25em;\n  box-sizing: border-box;\n  margin-bottom: 0.5em;\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-6 div.sk-estimator.fitted {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n/* on hover */\n#sk-container-id-6 div.sk-estimator:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-6 div.sk-estimator.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Specification for estimator info (e.g. \"i\" and \"?\") */\n\n/* Common style for \"i\" and \"?\" */\n\n.sk-estimator-doc-link,\na:link.sk-estimator-doc-link,\na:visited.sk-estimator-doc-link {\n  float: right;\n  font-size: smaller;\n  line-height: 1em;\n  font-family: monospace;\n  background-color: var(--sklearn-color-background);\n  border-radius: 1em;\n  height: 1em;\n  width: 1em;\n  text-decoration: none !important;\n  margin-left: 1ex;\n  /* unfitted */\n  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n  color: var(--sklearn-color-unfitted-level-1);\n}\n\n.sk-estimator-doc-link.fitted,\na:link.sk-estimator-doc-link.fitted,\na:visited.sk-estimator-doc-link.fitted {\n  /* fitted */\n  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n  color: var(--sklearn-color-fitted-level-1);\n}\n\n/* On hover */\ndiv.sk-estimator:hover .sk-estimator-doc-link:hover,\n.sk-estimator-doc-link:hover,\ndiv.sk-label-container:hover .sk-estimator-doc-link:hover,\n.sk-estimator-doc-link:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\ndiv.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n.sk-estimator-doc-link.fitted:hover,\ndiv.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n.sk-estimator-doc-link.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\n/* Span, style for the box shown on hovering the info icon */\n.sk-estimator-doc-link span {\n  display: none;\n  z-index: 9999;\n  position: relative;\n  font-weight: normal;\n  right: .2ex;\n  padding: .5ex;\n  margin: .5ex;\n  width: min-content;\n  min-width: 20ex;\n  max-width: 50ex;\n  color: var(--sklearn-color-text);\n  box-shadow: 2pt 2pt 4pt #999;\n  /* unfitted */\n  background: var(--sklearn-color-unfitted-level-0);\n  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n}\n\n.sk-estimator-doc-link.fitted span {\n  /* fitted */\n  background: var(--sklearn-color-fitted-level-0);\n  border: var(--sklearn-color-fitted-level-3);\n}\n\n.sk-estimator-doc-link:hover span {\n  display: block;\n}\n\n/* \"?\"-specific style due to the `<a>` HTML tag */\n\n#sk-container-id-6 a.estimator_doc_link {\n  float: right;\n  font-size: 1rem;\n  line-height: 1em;\n  font-family: monospace;\n  background-color: var(--sklearn-color-background);\n  border-radius: 1rem;\n  height: 1rem;\n  width: 1rem;\n  text-decoration: none;\n  /* unfitted */\n  color: var(--sklearn-color-unfitted-level-1);\n  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n}\n\n#sk-container-id-6 a.estimator_doc_link.fitted {\n  /* fitted */\n  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n  color: var(--sklearn-color-fitted-level-1);\n}\n\n/* On hover */\n#sk-container-id-6 a.estimator_doc_link:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\n#sk-container-id-6 a.estimator_doc_link.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-3);\n}\n</style><div id=\"sk-container-id-6\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;model&#x27;,\n                 KerasRegressor(batch_size=1, build_fn=&lt;function create_lstm_model at 0x7876cd4b7520&gt;, epochs=2, verbose=2))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-11\" type=\"checkbox\" ><label for=\"sk-estimator-id-11\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;Pipeline<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.pipeline.Pipeline.html\">?<span>Documentation for Pipeline</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>Pipeline(steps=[(&#x27;model&#x27;,\n                 KerasRegressor(batch_size=1, build_fn=&lt;function create_lstm_model at 0x7876cd4b7520&gt;, epochs=2, verbose=2))])</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-12\" type=\"checkbox\" ><label for=\"sk-estimator-id-12\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">KerasRegressor</label><div class=\"sk-toggleable__content fitted\"><pre>KerasRegressor(\n\tmodel=None\n\tbuild_fn=&lt;function create_lstm_model at 0x7876cd4b7520&gt;\n\twarm_start=False\n\trandom_state=None\n\toptimizer=rmsprop\n\tloss=None\n\tmetrics=None\n\tbatch_size=1\n\tvalidation_batch_size=None\n\tverbose=2\n\tcallbacks=None\n\tvalidation_split=0.0\n\tshuffle=True\n\trun_eagerly=False\n\tepochs=2\n)</pre></div> </div></div></div></div></div></div>"},"metadata":{}}]},{"cell_type":"code","source":"predictions=predictions.reshape(-1, 1)\n    # Inverse transform predictions\n    predictions = scaler.inverse_transform(predictions)\n    stock_data_dict[stock] = {\n        'predictions': predictions\n    }","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"for stock in stock_arrays.keys():\n    predictions = stock_data_dict[stock]['predictions']\n    y_test = stock_data_dict[stock]['y_test']\n    rmse = np.sqrt(mean_squared_error(predictions, y_test))\n    stock_data_dict[stock] = {\n        'rmse': rmse\n    }","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"for stock in stock_arrays.keys():\n    trainig_data_len=int(np.ceil( len(dataset1) * .83 ))\n    train = data[:training_data_len]\n    valid = data[training_data_len:]\n    valid['Predictions'] = predictions\n    # Visualize the data\n    plt.figure(figsize=(16,6))\n    plt.title('Model')\n    plt.xlabel('Date', fontsize=18)\n    plt.ylabel('Close Price USD ($)', fontsize=18)\n    plt.plot(train['Close'])\n    plt.plot(valid[['Close', 'Predictions']])\n    plt.legend(['Train', 'Val', 'Predictions'], loc='lower right')\n    plt.show()\n    print(valid)","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"stock_data_dict['ASHOKLEY.NS']['x_test']","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Define an empty dictionary to store data for each stock\nstock_data_dict = {}\n\nfor stock in stock_arrays.keys():\n    stock_arrays[stock]=stock_arrays[stock].reshape(-1,1)\n    # Fit the preprocessor pipeline to the current stock's data\n    preprocess_pipe.fit(stock_arrays[stock])\n    \n    # Transform the data\n    x_transformed, y_transformed, x_test, y_test = preprocess_pipe.transform(stock_arrays[stock])\n    \n    # Make predictions\n    predictions = pipe.predict(x_test)\n    \n    predictions=predictions.reshape(-1, 1)\n    \n    # Inverse transform predictions\n    predictions = scaler.inverse_transform(predictions)\n    \n    # Calculate RMSE\n    rmse = np.sqrt(mean_squared_error(predictions, y_test))\n    \n    # Store data in the dictionary\n    stock_data_dict[stock] = {\n        'x_transformed': x_transformed,\n        'y_transformed': y_transformed,\n        'x_test': x_test,\n        'y_test': y_test,\n        'predictions': predictions,\n        'rmse': rmse\n    }\n","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}