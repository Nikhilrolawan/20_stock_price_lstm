{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %pip install -q keras.src\n# %pip install -q tensorflow==2.12.0\n# %pip install -q keras==2.12.0\n# %pip install -q scikeras\n# %pip install -q yfinance","metadata":{"execution":{"iopub.status.busy":"2024-04-13T19:29:25.543828Z","iopub.execute_input":"2024-04-13T19:29:25.544158Z","iopub.status.idle":"2024-04-13T19:29:25.547975Z","shell.execute_reply.started":"2024-04-13T19:29:25.544130Z","shell.execute_reply":"2024-04-13T19:29:25.547368Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"from sklearn.pipeline import Pipeline\nfrom sklearn.base import BaseEstimator, TransformerMixin\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import train_test_split\nfrom scikeras.wrappers import KerasRegressor\nimport yfinance as yf\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nimport warnings\nwarnings.filterwarnings('ignore')\n# from tensorflow.keras.optimizers.legacy import Adam","metadata":{"execution":{"iopub.status.busy":"2024-04-13T19:29:25.921889Z","iopub.execute_input":"2024-04-13T19:29:25.922622Z","iopub.status.idle":"2024-04-13T19:29:29.971004Z","shell.execute_reply.started":"2024-04-13T19:29:25.922588Z","shell.execute_reply":"2024-04-13T19:29:29.970197Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"np.random.seed(1234)\ntf.random.set_seed(1234)","metadata":{"execution":{"iopub.status.busy":"2024-04-13T19:29:40.526576Z","iopub.execute_input":"2024-04-13T19:29:40.527450Z","iopub.status.idle":"2024-04-13T19:29:40.531601Z","shell.execute_reply.started":"2024-04-13T19:29:40.527413Z","shell.execute_reply":"2024-04-13T19:29:40.530863Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler(feature_range=(0,1))","metadata":{"execution":{"iopub.status.busy":"2024-04-13T19:29:49.507403Z","iopub.execute_input":"2024-04-13T19:29:49.507768Z","iopub.status.idle":"2024-04-13T19:29:49.511611Z","shell.execute_reply.started":"2024-04-13T19:29:49.507741Z","shell.execute_reply":"2024-04-13T19:29:49.510900Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"code","source":"from keras.models import Sequential\nfrom keras.layers import Dense, LSTM","metadata":{"execution":{"iopub.status.busy":"2024-04-13T19:30:08.725127Z","iopub.execute_input":"2024-04-13T19:30:08.725449Z","iopub.status.idle":"2024-04-13T19:30:08.728873Z","shell.execute_reply.started":"2024-04-13T19:30:08.725414Z","shell.execute_reply":"2024-04-13T19:30:08.728221Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"code","source":"# Define a transformer to preprocess the data\nclass DataPreprocessor(BaseEstimator, TransformerMixin):\n    \n    def __init__(self, n_steps=60):\n        self.n_steps = n_steps\n\n    def fit(self, X, y=None):\n        return self\n\n    def transform(self, X, y=None):\n        scaler = MinMaxScaler(feature_range=(0,1))\n        scaled_data = scaler.fit_transform(X)\n        training_data_len = int(np.ceil( len(X) * .83 ))\n        train_data = scaled_data[0:int(training_data_len), :]\n\n        test_data = scaled_data[training_data_len - 60: , :]\n        # Create the data sets x_test and y_test\n        x_test = []\n        y_test = X[training_data_len:, :]\n        x_test = np.array([test_data[i-60:i, 0] for i in range(60, len(test_data))])\n        # Convert the data to a numpy array\n        x_test = np.array(x_test)\n\n        # Reshape the data\n        x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1 ))\n\n        X_transformed= []\n        y_transformed =[]\n        for i in range(self.n_steps, len(train_data)):\n            # X_transformed.append(train_data[i-self.n_steps:i, 0])\n            # y_transformed.append(train_data[i, 0])\n\n            \n            X_transformed = np.array([train_data[i-self.n_steps:i, 0] for i in range(self.n_steps, len(train_data))])\n            y_transformed = np.array([train_data[i, 0] for i in range(self.n_steps, len(train_data))])\n            \n            X_transformed=np.array(X_transformed)\n            y_transformed=np.array(y_transformed)\n            X_transformed=np.reshape(X_transformed, (X_transformed.shape[0], X_transformed.shape[1], 1 ))\n            # y_transformed=np.reshape( (y_transformed.shape[0], y_transformed.shape[1], 1 ))\n\n        return X_transformed,y_transformed,x_test,y_test\n        # return np.array(X_transformed), np.array(y_transformed)","metadata":{"execution":{"iopub.status.busy":"2024-04-13T19:30:16.464735Z","iopub.execute_input":"2024-04-13T19:30:16.465083Z","iopub.status.idle":"2024-04-13T19:30:16.474601Z","shell.execute_reply.started":"2024-04-13T19:30:16.465057Z","shell.execute_reply":"2024-04-13T19:30:16.473778Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"code","source":"# Define a custom LSTM model\ndef create_lstm_model():\n    model = Sequential()\n    model.add(LSTM(128, return_sequences=True, input_shape=(60, 1)))\n    model.add(LSTM(64, return_sequences=False))\n    model.add(Dense(25))\n    model.add(Dense(1))\n    model.compile(optimizer='adam', loss='mean_squared_error')\n    return model\n\n# Define a transformer to convert predictions back to original scale\n# class InverseScaler(BaseEstimator, TransformerMixin):\n#     def __init__(self, scaler):\n#         self.scaler = scaler\n\n#     def fit(self, X, y=None):\n#         return self\n\n#     def transform(self, X, y=None):\n#         return self.scaler.inverse_transform(X)\n    \nkeras_regressor = KerasRegressor(build_fn=create_lstm_model, epochs=2, batch_size=1, verbose=2)\n\n# Define the pipeline\npreprocess_pipe = Pipeline([\n    ('preprocessor', DataPreprocessor())])\npipe = Pipeline([\n    ('model', keras_regressor)\n    # assuming 'scaler' is defined somewhere\n])","metadata":{"execution":{"iopub.status.busy":"2024-04-13T19:30:22.564550Z","iopub.execute_input":"2024-04-13T19:30:22.565242Z","iopub.status.idle":"2024-04-13T19:30:22.570735Z","shell.execute_reply.started":"2024-04-13T19:30:22.565208Z","shell.execute_reply":"2024-04-13T19:30:22.570116Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"df1 = yf.download('TATASTEEL.NS', start='2000-01-01', end='2024-01-01')\n# Create a new dataframe with only the 'Close column\ndata1 = df1.filter(['Close'])\n# Convert the dataframe to a numpy array\ndataset1 = data1.values","metadata":{"execution":{"iopub.status.busy":"2024-04-13T19:30:33.217657Z","iopub.execute_input":"2024-04-13T19:30:33.218006Z","iopub.status.idle":"2024-04-13T19:30:33.775005Z","shell.execute_reply.started":"2024-04-13T19:30:33.217978Z","shell.execute_reply":"2024-04-13T19:30:33.774207Z"},"trusted":true},"execution_count":8,"outputs":[{"name":"stderr","text":"[*********************100%%**********************]  1 of 1 completed\n","output_type":"stream"}]},{"cell_type":"code","source":"data1.shape","metadata":{"execution":{"iopub.status.busy":"2024-04-13T19:30:35.199572Z","iopub.execute_input":"2024-04-13T19:30:35.199905Z","iopub.status.idle":"2024-04-13T19:30:35.206916Z","shell.execute_reply.started":"2024-04-13T19:30:35.199877Z","shell.execute_reply":"2024-04-13T19:30:35.206299Z"},"trusted":true},"execution_count":9,"outputs":[{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"(5993, 1)"},"metadata":{}}]},{"cell_type":"code","source":"dataset1","metadata":{"execution":{"iopub.status.busy":"2024-04-13T19:30:36.350879Z","iopub.execute_input":"2024-04-13T19:30:36.351212Z","iopub.status.idle":"2024-04-13T19:30:36.357469Z","shell.execute_reply.started":"2024-04-13T19:30:36.351183Z","shell.execute_reply":"2024-04-13T19:30:36.356558Z"},"trusted":true},"execution_count":10,"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"array([[  8.55930519],\n       [  8.46666622],\n       [  8.78950024],\n       ...,\n       [137.19999695],\n       [138.1499939 ],\n       [139.6000061 ]])"},"metadata":{}}]},{"cell_type":"code","source":"(preprocess_pipe.fit(dataset1))","metadata":{"execution":{"iopub.status.busy":"2024-04-13T19:30:37.416393Z","iopub.execute_input":"2024-04-13T19:30:37.416736Z","iopub.status.idle":"2024-04-13T19:30:37.423101Z","shell.execute_reply.started":"2024-04-13T19:30:37.416710Z","shell.execute_reply":"2024-04-13T19:30:37.422474Z"},"trusted":true},"execution_count":11,"outputs":[{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"Pipeline(steps=[('preprocessor', DataPreprocessor())])","text/html":"<style>#sk-container-id-1 {\n  /* Definition of color scheme common for light and dark mode */\n  --sklearn-color-text: black;\n  --sklearn-color-line: gray;\n  /* Definition of color scheme for unfitted estimators */\n  --sklearn-color-unfitted-level-0: #fff5e6;\n  --sklearn-color-unfitted-level-1: #f6e4d2;\n  --sklearn-color-unfitted-level-2: #ffe0b3;\n  --sklearn-color-unfitted-level-3: chocolate;\n  /* Definition of color scheme for fitted estimators */\n  --sklearn-color-fitted-level-0: #f0f8ff;\n  --sklearn-color-fitted-level-1: #d4ebff;\n  --sklearn-color-fitted-level-2: #b3dbfd;\n  --sklearn-color-fitted-level-3: cornflowerblue;\n\n  /* Specific color for light theme */\n  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n  --sklearn-color-icon: #696969;\n\n  @media (prefers-color-scheme: dark) {\n    /* Redefinition of color scheme for dark theme */\n    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n    --sklearn-color-icon: #878787;\n  }\n}\n\n#sk-container-id-1 {\n  color: var(--sklearn-color-text);\n}\n\n#sk-container-id-1 pre {\n  padding: 0;\n}\n\n#sk-container-id-1 input.sk-hidden--visually {\n  border: 0;\n  clip: rect(1px 1px 1px 1px);\n  clip: rect(1px, 1px, 1px, 1px);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  width: 1px;\n}\n\n#sk-container-id-1 div.sk-dashed-wrapped {\n  border: 1px dashed var(--sklearn-color-line);\n  margin: 0 0.4em 0.5em 0.4em;\n  box-sizing: border-box;\n  padding-bottom: 0.4em;\n  background-color: var(--sklearn-color-background);\n}\n\n#sk-container-id-1 div.sk-container {\n  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n     but bootstrap.min.css set `[hidden] { display: none !important; }`\n     so we also need the `!important` here to be able to override the\n     default hidden behavior on the sphinx rendered scikit-learn.org.\n     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n  display: inline-block !important;\n  position: relative;\n}\n\n#sk-container-id-1 div.sk-text-repr-fallback {\n  display: none;\n}\n\ndiv.sk-parallel-item,\ndiv.sk-serial,\ndiv.sk-item {\n  /* draw centered vertical line to link estimators */\n  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n  background-size: 2px 100%;\n  background-repeat: no-repeat;\n  background-position: center center;\n}\n\n/* Parallel-specific style estimator block */\n\n#sk-container-id-1 div.sk-parallel-item::after {\n  content: \"\";\n  width: 100%;\n  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n  flex-grow: 1;\n}\n\n#sk-container-id-1 div.sk-parallel {\n  display: flex;\n  align-items: stretch;\n  justify-content: center;\n  background-color: var(--sklearn-color-background);\n  position: relative;\n}\n\n#sk-container-id-1 div.sk-parallel-item {\n  display: flex;\n  flex-direction: column;\n}\n\n#sk-container-id-1 div.sk-parallel-item:first-child::after {\n  align-self: flex-end;\n  width: 50%;\n}\n\n#sk-container-id-1 div.sk-parallel-item:last-child::after {\n  align-self: flex-start;\n  width: 50%;\n}\n\n#sk-container-id-1 div.sk-parallel-item:only-child::after {\n  width: 0;\n}\n\n/* Serial-specific style estimator block */\n\n#sk-container-id-1 div.sk-serial {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background-color: var(--sklearn-color-background);\n  padding-right: 1em;\n  padding-left: 1em;\n}\n\n\n/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\nclickable and can be expanded/collapsed.\n- Pipeline and ColumnTransformer use this feature and define the default style\n- Estimators will overwrite some part of the style using the `sk-estimator` class\n*/\n\n/* Pipeline and ColumnTransformer style (default) */\n\n#sk-container-id-1 div.sk-toggleable {\n  /* Default theme specific background. It is overwritten whether we have a\n  specific estimator or a Pipeline/ColumnTransformer */\n  background-color: var(--sklearn-color-background);\n}\n\n/* Toggleable label */\n#sk-container-id-1 label.sk-toggleable__label {\n  cursor: pointer;\n  display: block;\n  width: 100%;\n  margin-bottom: 0;\n  padding: 0.5em;\n  box-sizing: border-box;\n  text-align: center;\n}\n\n#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n  /* Arrow on the left of the label */\n  content: \"▸\";\n  float: left;\n  margin-right: 0.25em;\n  color: var(--sklearn-color-icon);\n}\n\n#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n  color: var(--sklearn-color-text);\n}\n\n/* Toggleable content - dropdown */\n\n#sk-container-id-1 div.sk-toggleable__content {\n  max-height: 0;\n  max-width: 0;\n  overflow: hidden;\n  text-align: left;\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-1 div.sk-toggleable__content.fitted {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n#sk-container-id-1 div.sk-toggleable__content pre {\n  margin: 0.2em;\n  border-radius: 0.25em;\n  color: var(--sklearn-color-text);\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n  /* unfitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n  /* Expand drop-down */\n  max-height: 200px;\n  max-width: 100%;\n  overflow: auto;\n}\n\n#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n  content: \"▾\";\n}\n\n/* Pipeline/ColumnTransformer-specific style */\n\n#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Estimator-specific style */\n\n/* Colorize estimator box */\n#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n#sk-container-id-1 div.sk-label label {\n  /* The background is the default theme color */\n  color: var(--sklearn-color-text-on-default-background);\n}\n\n/* On hover, darken the color of the background */\n#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n/* Label box, darken color on hover, fitted */\n#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Estimator label */\n\n#sk-container-id-1 div.sk-label label {\n  font-family: monospace;\n  font-weight: bold;\n  display: inline-block;\n  line-height: 1.2em;\n}\n\n#sk-container-id-1 div.sk-label-container {\n  text-align: center;\n}\n\n/* Estimator-specific */\n#sk-container-id-1 div.sk-estimator {\n  font-family: monospace;\n  border: 1px dotted var(--sklearn-color-border-box);\n  border-radius: 0.25em;\n  box-sizing: border-box;\n  margin-bottom: 0.5em;\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-1 div.sk-estimator.fitted {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n/* on hover */\n#sk-container-id-1 div.sk-estimator:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-1 div.sk-estimator.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Specification for estimator info (e.g. \"i\" and \"?\") */\n\n/* Common style for \"i\" and \"?\" */\n\n.sk-estimator-doc-link,\na:link.sk-estimator-doc-link,\na:visited.sk-estimator-doc-link {\n  float: right;\n  font-size: smaller;\n  line-height: 1em;\n  font-family: monospace;\n  background-color: var(--sklearn-color-background);\n  border-radius: 1em;\n  height: 1em;\n  width: 1em;\n  text-decoration: none !important;\n  margin-left: 1ex;\n  /* unfitted */\n  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n  color: var(--sklearn-color-unfitted-level-1);\n}\n\n.sk-estimator-doc-link.fitted,\na:link.sk-estimator-doc-link.fitted,\na:visited.sk-estimator-doc-link.fitted {\n  /* fitted */\n  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n  color: var(--sklearn-color-fitted-level-1);\n}\n\n/* On hover */\ndiv.sk-estimator:hover .sk-estimator-doc-link:hover,\n.sk-estimator-doc-link:hover,\ndiv.sk-label-container:hover .sk-estimator-doc-link:hover,\n.sk-estimator-doc-link:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\ndiv.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n.sk-estimator-doc-link.fitted:hover,\ndiv.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n.sk-estimator-doc-link.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\n/* Span, style for the box shown on hovering the info icon */\n.sk-estimator-doc-link span {\n  display: none;\n  z-index: 9999;\n  position: relative;\n  font-weight: normal;\n  right: .2ex;\n  padding: .5ex;\n  margin: .5ex;\n  width: min-content;\n  min-width: 20ex;\n  max-width: 50ex;\n  color: var(--sklearn-color-text);\n  box-shadow: 2pt 2pt 4pt #999;\n  /* unfitted */\n  background: var(--sklearn-color-unfitted-level-0);\n  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n}\n\n.sk-estimator-doc-link.fitted span {\n  /* fitted */\n  background: var(--sklearn-color-fitted-level-0);\n  border: var(--sklearn-color-fitted-level-3);\n}\n\n.sk-estimator-doc-link:hover span {\n  display: block;\n}\n\n/* \"?\"-specific style due to the `<a>` HTML tag */\n\n#sk-container-id-1 a.estimator_doc_link {\n  float: right;\n  font-size: 1rem;\n  line-height: 1em;\n  font-family: monospace;\n  background-color: var(--sklearn-color-background);\n  border-radius: 1rem;\n  height: 1rem;\n  width: 1rem;\n  text-decoration: none;\n  /* unfitted */\n  color: var(--sklearn-color-unfitted-level-1);\n  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n}\n\n#sk-container-id-1 a.estimator_doc_link.fitted {\n  /* fitted */\n  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n  color: var(--sklearn-color-fitted-level-1);\n}\n\n/* On hover */\n#sk-container-id-1 a.estimator_doc_link:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\n#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-3);\n}\n</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;preprocessor&#x27;, DataPreprocessor())])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label  sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label  sk-toggleable__label-arrow \">&nbsp;&nbsp;Pipeline<a class=\"sk-estimator-doc-link \" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.pipeline.Pipeline.html\">?<span>Documentation for Pipeline</span></a><span class=\"sk-estimator-doc-link \">i<span>Not fitted</span></span></label><div class=\"sk-toggleable__content \"><pre>Pipeline(steps=[(&#x27;preprocessor&#x27;, DataPreprocessor())])</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator  sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label  sk-toggleable__label-arrow \">DataPreprocessor</label><div class=\"sk-toggleable__content \"><pre>DataPreprocessor()</pre></div> </div></div></div></div></div></div>"},"metadata":{}}]},{"cell_type":"code","source":"x_n,y_n,test,y_test=preprocess_pipe.transform(dataset1)","metadata":{"execution":{"iopub.status.busy":"2024-04-13T19:30:40.312051Z","iopub.execute_input":"2024-04-13T19:30:40.312721Z","iopub.status.idle":"2024-04-13T19:31:01.935291Z","shell.execute_reply.started":"2024-04-13T19:30:40.312669Z","shell.execute_reply":"2024-04-13T19:31:01.934572Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"code","source":"print(x_n.shape)\nprint(y_n.shape)\nprint(test.shape)\nprint(y_test.shape)","metadata":{"execution":{"iopub.status.busy":"2024-04-13T19:31:05.393344Z","iopub.execute_input":"2024-04-13T19:31:05.394272Z","iopub.status.idle":"2024-04-13T19:31:05.398165Z","shell.execute_reply.started":"2024-04-13T19:31:05.394238Z","shell.execute_reply":"2024-04-13T19:31:05.397505Z"},"trusted":true},"execution_count":13,"outputs":[{"name":"stdout","text":"(4915, 60, 1)\n(4915,)\n(1018, 60, 1)\n(1018, 1)\n","output_type":"stream"}]},{"cell_type":"code","source":"pipe.fit(x_n,y_n)","metadata":{"execution":{"iopub.status.busy":"2024-04-13T19:31:07.948266Z","iopub.execute_input":"2024-04-13T19:31:07.948883Z","iopub.status.idle":"2024-04-13T19:34:08.427120Z","shell.execute_reply.started":"2024-04-13T19:31:07.948852Z","shell.execute_reply":"2024-04-13T19:34:08.426189Z"},"trusted":true},"execution_count":14,"outputs":[{"name":"stdout","text":"Epoch 1/2\n4915/4915 - 91s - 19ms/step - loss: 0.0010\nEpoch 2/2\n4915/4915 - 89s - 18ms/step - loss: 8.3403e-04\n","output_type":"stream"},{"execution_count":14,"output_type":"execute_result","data":{"text/plain":"Pipeline(steps=[('model',\n                 KerasRegressor(batch_size=1, build_fn=<function create_lstm_model at 0x7b682fc21ab0>, epochs=2, verbose=2))])","text/html":"<style>#sk-container-id-2 {\n  /* Definition of color scheme common for light and dark mode */\n  --sklearn-color-text: black;\n  --sklearn-color-line: gray;\n  /* Definition of color scheme for unfitted estimators */\n  --sklearn-color-unfitted-level-0: #fff5e6;\n  --sklearn-color-unfitted-level-1: #f6e4d2;\n  --sklearn-color-unfitted-level-2: #ffe0b3;\n  --sklearn-color-unfitted-level-3: chocolate;\n  /* Definition of color scheme for fitted estimators */\n  --sklearn-color-fitted-level-0: #f0f8ff;\n  --sklearn-color-fitted-level-1: #d4ebff;\n  --sklearn-color-fitted-level-2: #b3dbfd;\n  --sklearn-color-fitted-level-3: cornflowerblue;\n\n  /* Specific color for light theme */\n  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n  --sklearn-color-icon: #696969;\n\n  @media (prefers-color-scheme: dark) {\n    /* Redefinition of color scheme for dark theme */\n    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n    --sklearn-color-icon: #878787;\n  }\n}\n\n#sk-container-id-2 {\n  color: var(--sklearn-color-text);\n}\n\n#sk-container-id-2 pre {\n  padding: 0;\n}\n\n#sk-container-id-2 input.sk-hidden--visually {\n  border: 0;\n  clip: rect(1px 1px 1px 1px);\n  clip: rect(1px, 1px, 1px, 1px);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  width: 1px;\n}\n\n#sk-container-id-2 div.sk-dashed-wrapped {\n  border: 1px dashed var(--sklearn-color-line);\n  margin: 0 0.4em 0.5em 0.4em;\n  box-sizing: border-box;\n  padding-bottom: 0.4em;\n  background-color: var(--sklearn-color-background);\n}\n\n#sk-container-id-2 div.sk-container {\n  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n     but bootstrap.min.css set `[hidden] { display: none !important; }`\n     so we also need the `!important` here to be able to override the\n     default hidden behavior on the sphinx rendered scikit-learn.org.\n     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n  display: inline-block !important;\n  position: relative;\n}\n\n#sk-container-id-2 div.sk-text-repr-fallback {\n  display: none;\n}\n\ndiv.sk-parallel-item,\ndiv.sk-serial,\ndiv.sk-item {\n  /* draw centered vertical line to link estimators */\n  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n  background-size: 2px 100%;\n  background-repeat: no-repeat;\n  background-position: center center;\n}\n\n/* Parallel-specific style estimator block */\n\n#sk-container-id-2 div.sk-parallel-item::after {\n  content: \"\";\n  width: 100%;\n  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n  flex-grow: 1;\n}\n\n#sk-container-id-2 div.sk-parallel {\n  display: flex;\n  align-items: stretch;\n  justify-content: center;\n  background-color: var(--sklearn-color-background);\n  position: relative;\n}\n\n#sk-container-id-2 div.sk-parallel-item {\n  display: flex;\n  flex-direction: column;\n}\n\n#sk-container-id-2 div.sk-parallel-item:first-child::after {\n  align-self: flex-end;\n  width: 50%;\n}\n\n#sk-container-id-2 div.sk-parallel-item:last-child::after {\n  align-self: flex-start;\n  width: 50%;\n}\n\n#sk-container-id-2 div.sk-parallel-item:only-child::after {\n  width: 0;\n}\n\n/* Serial-specific style estimator block */\n\n#sk-container-id-2 div.sk-serial {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background-color: var(--sklearn-color-background);\n  padding-right: 1em;\n  padding-left: 1em;\n}\n\n\n/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\nclickable and can be expanded/collapsed.\n- Pipeline and ColumnTransformer use this feature and define the default style\n- Estimators will overwrite some part of the style using the `sk-estimator` class\n*/\n\n/* Pipeline and ColumnTransformer style (default) */\n\n#sk-container-id-2 div.sk-toggleable {\n  /* Default theme specific background. It is overwritten whether we have a\n  specific estimator or a Pipeline/ColumnTransformer */\n  background-color: var(--sklearn-color-background);\n}\n\n/* Toggleable label */\n#sk-container-id-2 label.sk-toggleable__label {\n  cursor: pointer;\n  display: block;\n  width: 100%;\n  margin-bottom: 0;\n  padding: 0.5em;\n  box-sizing: border-box;\n  text-align: center;\n}\n\n#sk-container-id-2 label.sk-toggleable__label-arrow:before {\n  /* Arrow on the left of the label */\n  content: \"▸\";\n  float: left;\n  margin-right: 0.25em;\n  color: var(--sklearn-color-icon);\n}\n\n#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {\n  color: var(--sklearn-color-text);\n}\n\n/* Toggleable content - dropdown */\n\n#sk-container-id-2 div.sk-toggleable__content {\n  max-height: 0;\n  max-width: 0;\n  overflow: hidden;\n  text-align: left;\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-2 div.sk-toggleable__content.fitted {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n#sk-container-id-2 div.sk-toggleable__content pre {\n  margin: 0.2em;\n  border-radius: 0.25em;\n  color: var(--sklearn-color-text);\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-2 div.sk-toggleable__content.fitted pre {\n  /* unfitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n  /* Expand drop-down */\n  max-height: 200px;\n  max-width: 100%;\n  overflow: auto;\n}\n\n#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n  content: \"▾\";\n}\n\n/* Pipeline/ColumnTransformer-specific style */\n\n#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-2 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Estimator-specific style */\n\n/* Colorize estimator box */\n#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-2 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n#sk-container-id-2 div.sk-label label.sk-toggleable__label,\n#sk-container-id-2 div.sk-label label {\n  /* The background is the default theme color */\n  color: var(--sklearn-color-text-on-default-background);\n}\n\n/* On hover, darken the color of the background */\n#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n/* Label box, darken color on hover, fitted */\n#sk-container-id-2 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Estimator label */\n\n#sk-container-id-2 div.sk-label label {\n  font-family: monospace;\n  font-weight: bold;\n  display: inline-block;\n  line-height: 1.2em;\n}\n\n#sk-container-id-2 div.sk-label-container {\n  text-align: center;\n}\n\n/* Estimator-specific */\n#sk-container-id-2 div.sk-estimator {\n  font-family: monospace;\n  border: 1px dotted var(--sklearn-color-border-box);\n  border-radius: 0.25em;\n  box-sizing: border-box;\n  margin-bottom: 0.5em;\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-2 div.sk-estimator.fitted {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n/* on hover */\n#sk-container-id-2 div.sk-estimator:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-2 div.sk-estimator.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Specification for estimator info (e.g. \"i\" and \"?\") */\n\n/* Common style for \"i\" and \"?\" */\n\n.sk-estimator-doc-link,\na:link.sk-estimator-doc-link,\na:visited.sk-estimator-doc-link {\n  float: right;\n  font-size: smaller;\n  line-height: 1em;\n  font-family: monospace;\n  background-color: var(--sklearn-color-background);\n  border-radius: 1em;\n  height: 1em;\n  width: 1em;\n  text-decoration: none !important;\n  margin-left: 1ex;\n  /* unfitted */\n  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n  color: var(--sklearn-color-unfitted-level-1);\n}\n\n.sk-estimator-doc-link.fitted,\na:link.sk-estimator-doc-link.fitted,\na:visited.sk-estimator-doc-link.fitted {\n  /* fitted */\n  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n  color: var(--sklearn-color-fitted-level-1);\n}\n\n/* On hover */\ndiv.sk-estimator:hover .sk-estimator-doc-link:hover,\n.sk-estimator-doc-link:hover,\ndiv.sk-label-container:hover .sk-estimator-doc-link:hover,\n.sk-estimator-doc-link:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\ndiv.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n.sk-estimator-doc-link.fitted:hover,\ndiv.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n.sk-estimator-doc-link.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\n/* Span, style for the box shown on hovering the info icon */\n.sk-estimator-doc-link span {\n  display: none;\n  z-index: 9999;\n  position: relative;\n  font-weight: normal;\n  right: .2ex;\n  padding: .5ex;\n  margin: .5ex;\n  width: min-content;\n  min-width: 20ex;\n  max-width: 50ex;\n  color: var(--sklearn-color-text);\n  box-shadow: 2pt 2pt 4pt #999;\n  /* unfitted */\n  background: var(--sklearn-color-unfitted-level-0);\n  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n}\n\n.sk-estimator-doc-link.fitted span {\n  /* fitted */\n  background: var(--sklearn-color-fitted-level-0);\n  border: var(--sklearn-color-fitted-level-3);\n}\n\n.sk-estimator-doc-link:hover span {\n  display: block;\n}\n\n/* \"?\"-specific style due to the `<a>` HTML tag */\n\n#sk-container-id-2 a.estimator_doc_link {\n  float: right;\n  font-size: 1rem;\n  line-height: 1em;\n  font-family: monospace;\n  background-color: var(--sklearn-color-background);\n  border-radius: 1rem;\n  height: 1rem;\n  width: 1rem;\n  text-decoration: none;\n  /* unfitted */\n  color: var(--sklearn-color-unfitted-level-1);\n  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n}\n\n#sk-container-id-2 a.estimator_doc_link.fitted {\n  /* fitted */\n  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n  color: var(--sklearn-color-fitted-level-1);\n}\n\n/* On hover */\n#sk-container-id-2 a.estimator_doc_link:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\n#sk-container-id-2 a.estimator_doc_link.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-3);\n}\n</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;model&#x27;,\n                 KerasRegressor(batch_size=1, build_fn=&lt;function create_lstm_model at 0x7b682fc21ab0&gt;, epochs=2, verbose=2))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;Pipeline<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.pipeline.Pipeline.html\">?<span>Documentation for Pipeline</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>Pipeline(steps=[(&#x27;model&#x27;,\n                 KerasRegressor(batch_size=1, build_fn=&lt;function create_lstm_model at 0x7b682fc21ab0&gt;, epochs=2, verbose=2))])</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">KerasRegressor</label><div class=\"sk-toggleable__content fitted\"><pre>KerasRegressor(\n\tmodel=None\n\tbuild_fn=&lt;function create_lstm_model at 0x7b682fc21ab0&gt;\n\twarm_start=False\n\trandom_state=None\n\toptimizer=rmsprop\n\tloss=None\n\tmetrics=None\n\tbatch_size=1\n\tvalidation_batch_size=None\n\tverbose=2\n\tcallbacks=None\n\tvalidation_split=0.0\n\tshuffle=True\n\trun_eagerly=False\n\tepochs=2\n)</pre></div> </div></div></div></div></div></div>"},"metadata":{}}]},{"cell_type":"code","source":"predictions=pipe.predict(test)\npredictions.shape\n","metadata":{"execution":{"iopub.status.busy":"2024-04-13T19:34:28.418072Z","iopub.execute_input":"2024-04-13T19:34:28.418462Z","iopub.status.idle":"2024-04-13T19:34:35.400148Z","shell.execute_reply.started":"2024-04-13T19:34:28.418430Z","shell.execute_reply":"2024-04-13T19:34:35.399189Z"},"trusted":true},"execution_count":15,"outputs":[{"name":"stdout","text":"1018/1018 - 7s - 6ms/step\n","output_type":"stream"},{"execution_count":15,"output_type":"execute_result","data":{"text/plain":"(1018,)"},"metadata":{}}]},{"cell_type":"code","source":"predictions=predictions.reshape(-1, 1)","metadata":{"execution":{"iopub.status.busy":"2024-04-13T19:34:35.401803Z","iopub.execute_input":"2024-04-13T19:34:35.402112Z","iopub.status.idle":"2024-04-13T19:34:35.406310Z","shell.execute_reply.started":"2024-04-13T19:34:35.402083Z","shell.execute_reply":"2024-04-13T19:34:35.405461Z"},"trusted":true},"execution_count":16,"outputs":[]},{"cell_type":"code","source":"scaler = MinMaxScaler(feature_range=(0,1))\nscaled_data = scaler.fit_transform(dataset1)\n\nscaled_data","metadata":{"execution":{"iopub.status.busy":"2024-04-13T19:34:35.407380Z","iopub.execute_input":"2024-04-13T19:34:35.407650Z","iopub.status.idle":"2024-04-13T19:34:35.421200Z","shell.execute_reply.started":"2024-04-13T19:34:35.407623Z","shell.execute_reply":"2024-04-13T19:34:35.420232Z"},"trusted":true},"execution_count":17,"outputs":[{"execution_count":17,"output_type":"execute_result","data":{"text/plain":"array([[0.03033118],\n       [0.02974378],\n       [0.03179078],\n       ...,\n       [0.84600573],\n       [0.8520294 ],\n       [0.86122352]])"},"metadata":{}}]},{"cell_type":"code","source":"predictions = scaler.inverse_transform(predictions)","metadata":{"execution":{"iopub.status.busy":"2024-04-13T19:34:39.789542Z","iopub.execute_input":"2024-04-13T19:34:39.790389Z","iopub.status.idle":"2024-04-13T19:34:39.795587Z","shell.execute_reply.started":"2024-04-13T19:34:39.790352Z","shell.execute_reply":"2024-04-13T19:34:39.794736Z"},"trusted":true},"execution_count":18,"outputs":[]},{"cell_type":"code","source":"predictions","metadata":{"execution":{"iopub.status.busy":"2024-04-13T19:34:40.898448Z","iopub.execute_input":"2024-04-13T19:34:40.898853Z","iopub.status.idle":"2024-04-13T19:34:40.904888Z","shell.execute_reply.started":"2024-04-13T19:34:40.898821Z","shell.execute_reply":"2024-04-13T19:34:40.904079Z"},"trusted":true},"execution_count":19,"outputs":[{"execution_count":19,"output_type":"execute_result","data":{"text/plain":"array([[ 38.299625],\n       [ 39.26211 ],\n       [ 39.952236],\n       ...,\n       [130.68784 ],\n       [132.0635  ],\n       [132.99365 ]], dtype=float32)"},"metadata":{}}]},{"cell_type":"code","source":"rmse = np.sqrt(np.mean(((predictions - y_test) ** 2)))\nrmse","metadata":{"execution":{"iopub.status.busy":"2024-04-13T19:34:44.900998Z","iopub.execute_input":"2024-04-13T19:34:44.901395Z","iopub.status.idle":"2024-04-13T19:34:44.909294Z","shell.execute_reply.started":"2024-04-13T19:34:44.901362Z","shell.execute_reply":"2024-04-13T19:34:44.908100Z"},"trusted":true},"execution_count":20,"outputs":[{"execution_count":20,"output_type":"execute_result","data":{"text/plain":"3.452056611083275"},"metadata":{}}]},{"cell_type":"code","source":"training_data_len=int(np.ceil( len(dataset1) * .83 ))\ntraining_data_len","metadata":{"execution":{"iopub.status.busy":"2024-04-13T19:34:46.824747Z","iopub.execute_input":"2024-04-13T19:34:46.825123Z","iopub.status.idle":"2024-04-13T19:34:46.830726Z","shell.execute_reply.started":"2024-04-13T19:34:46.825094Z","shell.execute_reply":"2024-04-13T19:34:46.829883Z"},"trusted":true},"execution_count":21,"outputs":[{"execution_count":21,"output_type":"execute_result","data":{"text/plain":"4975"},"metadata":{}}]},{"cell_type":"code","source":"\n# train = data1[:int(training_data_len)]\n# valid = data1[int(trainig_data_len):]\n\n# valid['Predictions'] = predictions","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# train = data1[:4196]\n# valid = data1[4196:]","metadata":{"execution":{"iopub.status.busy":"2024-04-13T19:34:55.896956Z","iopub.execute_input":"2024-04-13T19:34:55.897335Z","iopub.status.idle":"2024-04-13T19:34:55.901035Z","shell.execute_reply.started":"2024-04-13T19:34:55.897303Z","shell.execute_reply":"2024-04-13T19:34:55.900220Z"},"trusted":true},"execution_count":22,"outputs":[]},{"cell_type":"code","source":"trainig_data_len=int(np.ceil( len(dataset1) * .83 ))\ntrain = data1[:trainig_data_len]\nvalid = data1[trainig_data_len:]\nvalid['Predictions'] = predictions\n# Visualize the data\nplt.figure(figsize=(16,6))\nplt.title('Model')\nplt.xlabel('Date', fontsize=18)\nplt.ylabel('Close Price USD ($)', fontsize=18)\nplt.plot(train['Close'])\nplt.plot(valid[['Close', 'Predictions']])\nplt.legend(['Train', 'Val', 'Predictions'], loc='lower right')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-04-13T19:34:56.249262Z","iopub.execute_input":"2024-04-13T19:34:56.249538Z","iopub.status.idle":"2024-04-13T19:34:56.594036Z","shell.execute_reply.started":"2024-04-13T19:34:56.249512Z","shell.execute_reply":"2024-04-13T19:34:56.593121Z"},"trusted":true},"execution_count":23,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1600x600 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"# Define the list of stock symbols\nstock_symbols = ['HDFCBANK.NS', 'TCS.NS', 'ICICIBANK.NS', 'INFY.NS', 'ADANIPOWER.NS',\n                 'BAJFINANCE.NS', 'MARUTI.NS', 'HINDUNILVR.NS', 'ASIANPAINT.NS',\n                 'DRREDDY.NS', 'LTIM.NS', 'EICHERMOT.NS', 'CHOLAFIN.NS',\n                 'IDFCFIRSTB.NS', 'ASHOKLEY.NS', 'GESHIP.NS', 'SBICARD.NS',\n                 'BRITANNIA.NS', 'IIFL.NS']\n\n# Download historical data for each stock\nstock_data = {}\nfor symbol in stock_symbols:\n    data = yf.download(symbol, start='2000-01-01', end='2024-01-01')\n    stock_data[symbol] = data\n\n# Extract close prices for each stock\nclose_prices = {}\nfor symbol, data in stock_data.items():\n    close_prices[symbol] = data['Close']\n\n# Create DataFrames for each stock\nstock_dfs = {}\nfor symbol, prices in close_prices.items():\n    stock_dfs[symbol] = pd.DataFrame({'Close': prices})\n\n# Convert close prices of each stock DataFrame into NumPy arrays\nstock_arrays = {}\nfor symbol, df in stock_dfs.items():\n    stock_arrays[symbol] = df['Close'].values\n    stock_arrays[symbol]=stock_arrays[symbol].reshape(-1,1)\n\n# Now you have the close price arrays for each stock in the stock_arrays dictionary\n","metadata":{"execution":{"iopub.status.busy":"2024-04-13T19:35:02.344112Z","iopub.execute_input":"2024-04-13T19:35:02.344539Z","iopub.status.idle":"2024-04-13T19:35:10.855501Z","shell.execute_reply.started":"2024-04-13T19:35:02.344503Z","shell.execute_reply":"2024-04-13T19:35:10.854667Z"},"trusted":true},"execution_count":24,"outputs":[{"name":"stderr","text":"[*********************100%%**********************]  1 of 1 completed\n[*********************100%%**********************]  1 of 1 completed\n[*********************100%%**********************]  1 of 1 completed\n[*********************100%%**********************]  1 of 1 completed\n[*********************100%%**********************]  1 of 1 completed\n[*********************100%%**********************]  1 of 1 completed\n[*********************100%%**********************]  1 of 1 completed\n[*********************100%%**********************]  1 of 1 completed\n[*********************100%%**********************]  1 of 1 completed\n[*********************100%%**********************]  1 of 1 completed\n[*********************100%%**********************]  1 of 1 completed\n[*********************100%%**********************]  1 of 1 completed\n[*********************100%%**********************]  1 of 1 completed\n[*********************100%%**********************]  1 of 1 completed\n[*********************100%%**********************]  1 of 1 completed\n[*********************100%%**********************]  1 of 1 completed\n[*********************100%%**********************]  1 of 1 completed\n[*********************100%%**********************]  1 of 1 completed\n[*********************100%%**********************]  1 of 1 completed\n","output_type":"stream"}]},{"cell_type":"code","source":"stock_arrays['TCS.NS']","metadata":{"execution":{"iopub.status.busy":"2024-04-13T19:35:34.002430Z","iopub.execute_input":"2024-04-13T19:35:34.002843Z","iopub.status.idle":"2024-04-13T19:35:34.009127Z","shell.execute_reply.started":"2024-04-13T19:35:34.002809Z","shell.execute_reply":"2024-04-13T19:35:34.008458Z"},"trusted":true},"execution_count":25,"outputs":[{"execution_count":25,"output_type":"execute_result","data":{"text/plain":"array([[  39.70000076],\n       [  39.16249847],\n       [  36.46250153],\n       ...,\n       [3811.19995117],\n       [3799.89990234],\n       [3793.39990234]])"},"metadata":{}}]},{"cell_type":"code","source":"stock_data_dict = {}\n\nfor stock in stock_arrays.keys():\n    stock_arrays[stock]=stock_arrays[stock].reshape(-1,1)\n    # Fit the preprocessor pipeline to the current stock's data\n    preprocess_pipe.fit(stock_arrays[stock])","metadata":{"execution":{"iopub.status.busy":"2024-04-13T19:35:35.008823Z","iopub.execute_input":"2024-04-13T19:35:35.009180Z","iopub.status.idle":"2024-04-13T19:35:35.016130Z","shell.execute_reply.started":"2024-04-13T19:35:35.009151Z","shell.execute_reply":"2024-04-13T19:35:35.015396Z"},"trusted":true},"execution_count":26,"outputs":[]},{"cell_type":"code","source":"for stock in stock_arrays.keys():\n    # Transform the data\n    x_transformed, y_transformed, x_test, y_test = preprocess_pipe.transform(stock_arrays[stock])\n    stock_data_dict[stock] = {\n        'x_transformed': x_transformed,\n        'y_transformed': y_transformed,\n        'x_test': x_test,\n        'y_test': y_test}","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"type(stock_data_dict['IIFL.NS']['x_test'])","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"for stock in stock_arrays.keys():\n    x_transformed = stock_data_dict[stock]['x_transformed']\n    y_transformed = stock_data_dict[stock]['y_transformed']\n    print(\"Loss for\", stock)\n    print()\n    predictions = pipe.fit(x_transformed,y_transformed)\n    stock_data_dict[stock] = {\n        'predictions': predictions\n    }","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"stock_data_dict['IIFL.NS']['x_test']","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"for stock in stock_arrays.keys():\n    x_test = stock_data_dict[stock]['x_test']\n#     y_transformed = stock_data_dict[stock]['y_transformed']\n    predictions = pipe.predict(x_test)\n    stock_data_dict[stock] = {\n        'predictions': predictions\n    }","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"predictions1 = stock_data_dict['IIFL.NS']['predictions']\npredictions1","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"predictions=predictions.reshape(-1, 1)\n    # Inverse transform predictions\n    predictions = scaler.inverse_transform(predictions)\n    stock_data_dict[stock] = {\n        'predictions': predictions\n    }","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"for stock in stock_arrays.keys():\n    predictions = stock_data_dict[stock]['predictions']\n    y_test = stock_data_dict[stock]['y_test']\n    rmse = np.sqrt(mean_squared_error(predictions, y_test))\n    stock_data_dict[stock] = {\n        'rmse': rmse\n    }","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"for stock in stock_arrays.keys():\n    trainig_data_len=int(np.ceil( len(dataset1) * .83 ))\n    train = data[:training_data_len]\n    valid = data[training_data_len:]\n    valid['Predictions'] = predictions\n    # Visualize the data\n    plt.figure(figsize=(16,6))\n    plt.title('Model')\n    plt.xlabel('Date', fontsize=18)\n    plt.ylabel('Close Price USD ($)', fontsize=18)\n    plt.plot(train['Close'])\n    plt.plot(valid[['Close', 'Predictions']])\n    plt.legend(['Train', 'Val', 'Predictions'], loc='lower right')\n    plt.show()\n    print(valid)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"stock_data_dict['ASHOKLEY.NS']['x_test']","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Define an empty dictionary to store data for each stock\nstock_data_dict = {}\n\nfor stock in stock_arrays.keys():\n    stock_arrays[stock]=stock_arrays[stock].reshape(-1,1)\n    # Fit the preprocessor pipeline to the current stock's data\n    preprocess_pipe.fit(stock_arrays[stock])\n    \n    # Transform the data\n    x_transformed, y_transformed, x_test, y_test = preprocess_pipe.transform(stock_arrays[stock])\n    \n    # Make predictions\n    predictions = pipe.predict(x_test)\n    \n    predictions=predictions.reshape(-1, 1)\n    \n    # Inverse transform predictions\n    predictions = scaler.inverse_transform(predictions)\n    \n    # Calculate RMSE\n    rmse = np.sqrt(mean_squared_error(predictions, y_test))\n    \n    # Store data in the dictionary\n    stock_data_dict[stock] = {\n        'x_transformed': x_transformed,\n        'y_transformed': y_transformed,\n        'x_test': x_test,\n        'y_test': y_test,\n        'predictions': predictions,\n        'rmse': rmse\n    }\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]}]}