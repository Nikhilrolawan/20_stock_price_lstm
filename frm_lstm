{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"from sklearn.pipeline import Pipeline\nfrom sklearn.base import BaseEstimator, TransformerMixin\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import train_test_split\nfrom scikeras.wrappers import KerasRegressor","metadata":{"execution":{"iopub.status.busy":"2024-04-13T19:10:04.740414Z","iopub.execute_input":"2024-04-13T19:10:04.740965Z","iopub.status.idle":"2024-04-13T19:10:08.468356Z","shell.execute_reply.started":"2024-04-13T19:10:04.740930Z","shell.execute_reply":"2024-04-13T19:10:08.467608Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"import tensorflow as tf\nimport warnings\nwarnings.filterwarnings('ignore')","metadata":{"execution":{"iopub.status.busy":"2024-04-13T19:10:09.812571Z","iopub.execute_input":"2024-04-13T19:10:09.813155Z","iopub.status.idle":"2024-04-13T19:10:09.818149Z","shell.execute_reply.started":"2024-04-13T19:10:09.813118Z","shell.execute_reply":"2024-04-13T19:10:09.817512Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"np.random.seed(1234)\ntf.random.set_seed(1234)","metadata":{"execution":{"iopub.status.busy":"2024-04-13T19:10:16.442159Z","iopub.execute_input":"2024-04-13T19:10:16.443086Z","iopub.status.idle":"2024-04-13T19:10:16.447370Z","shell.execute_reply.started":"2024-04-13T19:10:16.443046Z","shell.execute_reply":"2024-04-13T19:10:16.446743Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"code","source":"import yfinance as yf\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import MinMaxScaler\n\nscaler = MinMaxScaler(feature_range=(0,1))","metadata":{"execution":{"iopub.status.busy":"2024-04-13T19:10:11.716597Z","iopub.execute_input":"2024-04-13T19:10:11.716953Z","iopub.status.idle":"2024-04-13T19:10:13.053789Z","shell.execute_reply.started":"2024-04-13T19:10:11.716924Z","shell.execute_reply":"2024-04-13T19:10:13.052969Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"code","source":"# %pip install -q scikeras\n# %pip install -q yfinance","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nfrom keras.models import Sequential\nfrom keras.layers import Dense, LSTM","metadata":{"execution":{"iopub.status.busy":"2024-04-13T19:10:19.318331Z","iopub.execute_input":"2024-04-13T19:10:19.319241Z","iopub.status.idle":"2024-04-13T19:10:19.322691Z","shell.execute_reply.started":"2024-04-13T19:10:19.319202Z","shell.execute_reply":"2024-04-13T19:10:19.321966Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"code","source":"# Define a transformer to preprocess the data\nclass DataPreprocessor(BaseEstimator, TransformerMixin):\n    \n    def __init__(self, n_steps=60):\n        self.n_steps = n_steps\n\n    def fit(self, X, y=None):\n        return self\n\n    def transform(self, X, y=None):\n        scaler = MinMaxScaler(feature_range=(0,1))\n        scaled_data = scaler.fit_transform(X)\n        training_data_len = int(np.ceil( len(X) * .83 ))\n        train_data = scaled_data[0:int(training_data_len), :]\n\n        test_data = scaled_data[training_data_len - 60: , :]\n        # Create the data sets x_test and y_test\n        x_test = []\n        y_test = X[training_data_len:, :]\n        x_test = np.array([test_data[i-60:i, 0] for i in range(60, len(test_data))])\n        # Convert the data to a numpy array\n        x_test = np.array(x_test)\n\n        # Reshape the data\n        x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1 ))\n\n        X_transformed= []\n        y_transformed =[]\n        for i in range(self.n_steps, len(train_data)):\n            # X_transformed.append(train_data[i-self.n_steps:i, 0])\n            # y_transformed.append(train_data[i, 0])\n\n            \n            X_transformed = np.array([train_data[i-self.n_steps:i, 0] for i in range(self.n_steps, len(train_data))])\n            y_transformed = np.array([train_data[i, 0] for i in range(self.n_steps, len(train_data))])\n            \n            X_transformed=np.array(X_transformed)\n            y_transformed=np.array(y_transformed)\n            X_transformed=np.reshape(X_transformed, (X_transformed.shape[0], X_transformed.shape[1], 1 ))\n            # y_transformed=np.reshape( (y_transformed.shape[0], y_transformed.shape[1], 1 ))\n\n        return X_transformed,y_transformed,x_test,y_test\n        # return np.array(X_transformed), np.array(y_transformed)","metadata":{"execution":{"iopub.status.busy":"2024-04-13T19:10:22.288688Z","iopub.execute_input":"2024-04-13T19:10:22.289061Z","iopub.status.idle":"2024-04-13T19:10:22.298278Z","shell.execute_reply.started":"2024-04-13T19:10:22.289032Z","shell.execute_reply":"2024-04-13T19:10:22.297632Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"# Define a custom LSTM model\ndef create_lstm_model():\n    model = Sequential()\n    model.add(LSTM(128, return_sequences=True, input_shape=(60, 1)))\n    model.add(LSTM(64, return_sequences=False))\n    model.add(Dense(25))\n    model.add(Dense(1))\n    model.compile(optimizer='adam', loss='mean_squared_error')\n    return model\n\n# Define a transformer to convert predictions back to original scale\n# class InverseScaler(BaseEstimator, TransformerMixin):\n#     def __init__(self, scaler):\n#         self.scaler = scaler\n\n#     def fit(self, X, y=None):\n#         return self\n\n#     def transform(self, X, y=None):\n#         return self.scaler.inverse_transform(X)\n    \nkeras_regressor = KerasRegressor(build_fn=create_lstm_model, epochs=2, batch_size=1, verbose=2)\n\n# Define the pipeline\npreprocess_pipe = Pipeline([\n    ('preprocessor', DataPreprocessor())])\npipe = Pipeline([\n    ('model', keras_regressor)\n    # assuming 'scaler' is defined somewhere\n])","metadata":{"execution":{"iopub.status.busy":"2024-04-13T19:10:26.814652Z","iopub.execute_input":"2024-04-13T19:10:26.815044Z","iopub.status.idle":"2024-04-13T19:10:26.820386Z","shell.execute_reply.started":"2024-04-13T19:10:26.815016Z","shell.execute_reply":"2024-04-13T19:10:26.819743Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"code","source":"df1 = yf.download('TATASTEEL.NS', start='2000-01-01', end='2024-01-01')\n# Create a new dataframe with only the 'Close column\ndata1 = df1.filter(['Close'])\n# Convert the dataframe to a numpy array\ndataset1 = data1.values","metadata":{"execution":{"iopub.status.busy":"2024-04-13T19:10:30.662714Z","iopub.execute_input":"2024-04-13T19:10:30.663631Z","iopub.status.idle":"2024-04-13T19:10:31.443018Z","shell.execute_reply.started":"2024-04-13T19:10:30.663594Z","shell.execute_reply":"2024-04-13T19:10:31.442320Z"},"trusted":true},"execution_count":9,"outputs":[{"name":"stderr","text":"[*********************100%%**********************]  1 of 1 completed\n","output_type":"stream"}]},{"cell_type":"code","source":"data1.shape","metadata":{"execution":{"iopub.status.busy":"2024-04-13T19:10:35.360048Z","iopub.execute_input":"2024-04-13T19:10:35.360829Z","iopub.status.idle":"2024-04-13T19:10:35.367381Z","shell.execute_reply.started":"2024-04-13T19:10:35.360795Z","shell.execute_reply":"2024-04-13T19:10:35.366810Z"},"trusted":true},"execution_count":10,"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"(5993, 1)"},"metadata":{}}]},{"cell_type":"code","source":"dataset1","metadata":{"execution":{"iopub.status.busy":"2024-04-13T19:10:35.711854Z","iopub.execute_input":"2024-04-13T19:10:35.712398Z","iopub.status.idle":"2024-04-13T19:10:35.717592Z","shell.execute_reply.started":"2024-04-13T19:10:35.712365Z","shell.execute_reply":"2024-04-13T19:10:35.716994Z"},"trusted":true},"execution_count":11,"outputs":[{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"array([[  8.55930519],\n       [  8.46666622],\n       [  8.78950024],\n       ...,\n       [137.19999695],\n       [138.1499939 ],\n       [139.6000061 ]])"},"metadata":{}}]},{"cell_type":"code","source":"(preprocess_pipe.fit(dataset1))","metadata":{"execution":{"iopub.status.busy":"2024-04-13T19:10:38.269922Z","iopub.execute_input":"2024-04-13T19:10:38.270265Z","iopub.status.idle":"2024-04-13T19:10:38.277159Z","shell.execute_reply.started":"2024-04-13T19:10:38.270226Z","shell.execute_reply":"2024-04-13T19:10:38.276552Z"},"trusted":true},"execution_count":12,"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"Pipeline(steps=[('preprocessor', DataPreprocessor())])","text/html":"<style>#sk-container-id-1 {\n  /* Definition of color scheme common for light and dark mode */\n  --sklearn-color-text: black;\n  --sklearn-color-line: gray;\n  /* Definition of color scheme for unfitted estimators */\n  --sklearn-color-unfitted-level-0: #fff5e6;\n  --sklearn-color-unfitted-level-1: #f6e4d2;\n  --sklearn-color-unfitted-level-2: #ffe0b3;\n  --sklearn-color-unfitted-level-3: chocolate;\n  /* Definition of color scheme for fitted estimators */\n  --sklearn-color-fitted-level-0: #f0f8ff;\n  --sklearn-color-fitted-level-1: #d4ebff;\n  --sklearn-color-fitted-level-2: #b3dbfd;\n  --sklearn-color-fitted-level-3: cornflowerblue;\n\n  /* Specific color for light theme */\n  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n  --sklearn-color-icon: #696969;\n\n  @media (prefers-color-scheme: dark) {\n    /* Redefinition of color scheme for dark theme */\n    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n    --sklearn-color-icon: #878787;\n  }\n}\n\n#sk-container-id-1 {\n  color: var(--sklearn-color-text);\n}\n\n#sk-container-id-1 pre {\n  padding: 0;\n}\n\n#sk-container-id-1 input.sk-hidden--visually {\n  border: 0;\n  clip: rect(1px 1px 1px 1px);\n  clip: rect(1px, 1px, 1px, 1px);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  width: 1px;\n}\n\n#sk-container-id-1 div.sk-dashed-wrapped {\n  border: 1px dashed var(--sklearn-color-line);\n  margin: 0 0.4em 0.5em 0.4em;\n  box-sizing: border-box;\n  padding-bottom: 0.4em;\n  background-color: var(--sklearn-color-background);\n}\n\n#sk-container-id-1 div.sk-container {\n  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n     but bootstrap.min.css set `[hidden] { display: none !important; }`\n     so we also need the `!important` here to be able to override the\n     default hidden behavior on the sphinx rendered scikit-learn.org.\n     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n  display: inline-block !important;\n  position: relative;\n}\n\n#sk-container-id-1 div.sk-text-repr-fallback {\n  display: none;\n}\n\ndiv.sk-parallel-item,\ndiv.sk-serial,\ndiv.sk-item {\n  /* draw centered vertical line to link estimators */\n  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n  background-size: 2px 100%;\n  background-repeat: no-repeat;\n  background-position: center center;\n}\n\n/* Parallel-specific style estimator block */\n\n#sk-container-id-1 div.sk-parallel-item::after {\n  content: \"\";\n  width: 100%;\n  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n  flex-grow: 1;\n}\n\n#sk-container-id-1 div.sk-parallel {\n  display: flex;\n  align-items: stretch;\n  justify-content: center;\n  background-color: var(--sklearn-color-background);\n  position: relative;\n}\n\n#sk-container-id-1 div.sk-parallel-item {\n  display: flex;\n  flex-direction: column;\n}\n\n#sk-container-id-1 div.sk-parallel-item:first-child::after {\n  align-self: flex-end;\n  width: 50%;\n}\n\n#sk-container-id-1 div.sk-parallel-item:last-child::after {\n  align-self: flex-start;\n  width: 50%;\n}\n\n#sk-container-id-1 div.sk-parallel-item:only-child::after {\n  width: 0;\n}\n\n/* Serial-specific style estimator block */\n\n#sk-container-id-1 div.sk-serial {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background-color: var(--sklearn-color-background);\n  padding-right: 1em;\n  padding-left: 1em;\n}\n\n\n/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\nclickable and can be expanded/collapsed.\n- Pipeline and ColumnTransformer use this feature and define the default style\n- Estimators will overwrite some part of the style using the `sk-estimator` class\n*/\n\n/* Pipeline and ColumnTransformer style (default) */\n\n#sk-container-id-1 div.sk-toggleable {\n  /* Default theme specific background. It is overwritten whether we have a\n  specific estimator or a Pipeline/ColumnTransformer */\n  background-color: var(--sklearn-color-background);\n}\n\n/* Toggleable label */\n#sk-container-id-1 label.sk-toggleable__label {\n  cursor: pointer;\n  display: block;\n  width: 100%;\n  margin-bottom: 0;\n  padding: 0.5em;\n  box-sizing: border-box;\n  text-align: center;\n}\n\n#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n  /* Arrow on the left of the label */\n  content: \"▸\";\n  float: left;\n  margin-right: 0.25em;\n  color: var(--sklearn-color-icon);\n}\n\n#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n  color: var(--sklearn-color-text);\n}\n\n/* Toggleable content - dropdown */\n\n#sk-container-id-1 div.sk-toggleable__content {\n  max-height: 0;\n  max-width: 0;\n  overflow: hidden;\n  text-align: left;\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-1 div.sk-toggleable__content.fitted {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n#sk-container-id-1 div.sk-toggleable__content pre {\n  margin: 0.2em;\n  border-radius: 0.25em;\n  color: var(--sklearn-color-text);\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n  /* unfitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n  /* Expand drop-down */\n  max-height: 200px;\n  max-width: 100%;\n  overflow: auto;\n}\n\n#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n  content: \"▾\";\n}\n\n/* Pipeline/ColumnTransformer-specific style */\n\n#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Estimator-specific style */\n\n/* Colorize estimator box */\n#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n#sk-container-id-1 div.sk-label label {\n  /* The background is the default theme color */\n  color: var(--sklearn-color-text-on-default-background);\n}\n\n/* On hover, darken the color of the background */\n#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n/* Label box, darken color on hover, fitted */\n#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Estimator label */\n\n#sk-container-id-1 div.sk-label label {\n  font-family: monospace;\n  font-weight: bold;\n  display: inline-block;\n  line-height: 1.2em;\n}\n\n#sk-container-id-1 div.sk-label-container {\n  text-align: center;\n}\n\n/* Estimator-specific */\n#sk-container-id-1 div.sk-estimator {\n  font-family: monospace;\n  border: 1px dotted var(--sklearn-color-border-box);\n  border-radius: 0.25em;\n  box-sizing: border-box;\n  margin-bottom: 0.5em;\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-1 div.sk-estimator.fitted {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n/* on hover */\n#sk-container-id-1 div.sk-estimator:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-1 div.sk-estimator.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Specification for estimator info (e.g. \"i\" and \"?\") */\n\n/* Common style for \"i\" and \"?\" */\n\n.sk-estimator-doc-link,\na:link.sk-estimator-doc-link,\na:visited.sk-estimator-doc-link {\n  float: right;\n  font-size: smaller;\n  line-height: 1em;\n  font-family: monospace;\n  background-color: var(--sklearn-color-background);\n  border-radius: 1em;\n  height: 1em;\n  width: 1em;\n  text-decoration: none !important;\n  margin-left: 1ex;\n  /* unfitted */\n  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n  color: var(--sklearn-color-unfitted-level-1);\n}\n\n.sk-estimator-doc-link.fitted,\na:link.sk-estimator-doc-link.fitted,\na:visited.sk-estimator-doc-link.fitted {\n  /* fitted */\n  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n  color: var(--sklearn-color-fitted-level-1);\n}\n\n/* On hover */\ndiv.sk-estimator:hover .sk-estimator-doc-link:hover,\n.sk-estimator-doc-link:hover,\ndiv.sk-label-container:hover .sk-estimator-doc-link:hover,\n.sk-estimator-doc-link:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\ndiv.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n.sk-estimator-doc-link.fitted:hover,\ndiv.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n.sk-estimator-doc-link.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\n/* Span, style for the box shown on hovering the info icon */\n.sk-estimator-doc-link span {\n  display: none;\n  z-index: 9999;\n  position: relative;\n  font-weight: normal;\n  right: .2ex;\n  padding: .5ex;\n  margin: .5ex;\n  width: min-content;\n  min-width: 20ex;\n  max-width: 50ex;\n  color: var(--sklearn-color-text);\n  box-shadow: 2pt 2pt 4pt #999;\n  /* unfitted */\n  background: var(--sklearn-color-unfitted-level-0);\n  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n}\n\n.sk-estimator-doc-link.fitted span {\n  /* fitted */\n  background: var(--sklearn-color-fitted-level-0);\n  border: var(--sklearn-color-fitted-level-3);\n}\n\n.sk-estimator-doc-link:hover span {\n  display: block;\n}\n\n/* \"?\"-specific style due to the `<a>` HTML tag */\n\n#sk-container-id-1 a.estimator_doc_link {\n  float: right;\n  font-size: 1rem;\n  line-height: 1em;\n  font-family: monospace;\n  background-color: var(--sklearn-color-background);\n  border-radius: 1rem;\n  height: 1rem;\n  width: 1rem;\n  text-decoration: none;\n  /* unfitted */\n  color: var(--sklearn-color-unfitted-level-1);\n  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n}\n\n#sk-container-id-1 a.estimator_doc_link.fitted {\n  /* fitted */\n  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n  color: var(--sklearn-color-fitted-level-1);\n}\n\n/* On hover */\n#sk-container-id-1 a.estimator_doc_link:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\n#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-3);\n}\n</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;preprocessor&#x27;, DataPreprocessor())])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label  sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label  sk-toggleable__label-arrow \">&nbsp;&nbsp;Pipeline<a class=\"sk-estimator-doc-link \" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.pipeline.Pipeline.html\">?<span>Documentation for Pipeline</span></a><span class=\"sk-estimator-doc-link \">i<span>Not fitted</span></span></label><div class=\"sk-toggleable__content \"><pre>Pipeline(steps=[(&#x27;preprocessor&#x27;, DataPreprocessor())])</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator  sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label  sk-toggleable__label-arrow \">DataPreprocessor</label><div class=\"sk-toggleable__content \"><pre>DataPreprocessor()</pre></div> </div></div></div></div></div></div>"},"metadata":{}}]},{"cell_type":"code","source":"x_n,y_n,test,y_test=preprocess_pipe.transform(dataset1)","metadata":{"execution":{"iopub.status.busy":"2024-04-13T19:10:38.680655Z","iopub.execute_input":"2024-04-13T19:10:38.680935Z","iopub.status.idle":"2024-04-13T19:11:00.678072Z","shell.execute_reply.started":"2024-04-13T19:10:38.680909Z","shell.execute_reply":"2024-04-13T19:11:00.677283Z"},"trusted":true},"execution_count":13,"outputs":[]},{"cell_type":"code","source":"print(x_n.shape)\nprint(y_n.shape)\nprint(test.shape)\nprint(y_test.shape)","metadata":{"execution":{"iopub.status.busy":"2024-04-13T19:11:00.679345Z","iopub.execute_input":"2024-04-13T19:11:00.679605Z","iopub.status.idle":"2024-04-13T19:11:00.683489Z","shell.execute_reply.started":"2024-04-13T19:11:00.679580Z","shell.execute_reply":"2024-04-13T19:11:00.682831Z"},"trusted":true},"execution_count":14,"outputs":[{"name":"stdout","text":"(4915, 60, 1)\n(4915,)\n(1018, 60, 1)\n(1018, 1)\n","output_type":"stream"}]},{"cell_type":"code","source":"pipe.fit(x_n,y_n)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"predictions=pipe.predict(test)\npredictions.shape\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"predictions=predictions.reshape(-1, 1)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"scaler = MinMaxScaler(feature_range=(0,1))\nscaled_data = scaler.fit_transform(dataset1)\n\nscaled_data","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"predictions = scaler.inverse_transform(predictions)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"predictions","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"rmse = np.sqrt(np.mean(((predictions - y_test) ** 2)))\nrmse","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"training_data_len=int(np.ceil( len(dataset1) * .83 ))\ntraining_data_len","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\n# train = data1[:int(training_data_len)]\n# valid = data1[int(trainig_data_len):]\n\n# valid['Predictions'] = predictions","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train = data1[:4196]\nvalid = data1[4196:]","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"trainig_data_len=int(np.ceil( len(dataset1) * .83 ))\ntrain = data1[:trainig_data_len]\nvalid = data1[trainig_data_len:]\nvalid['Predictions'] = predictions\n# Visualize the data\nplt.figure(figsize=(16,6))\nplt.title('Model')\nplt.xlabel('Date', fontsize=18)\nplt.ylabel('Close Price USD ($)', fontsize=18)\nplt.plot(train['Close'])\nplt.plot(valid[['Close', 'Predictions']])\nplt.legend(['Train', 'Val', 'Predictions'], loc='lower right')\nplt.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Define the list of stock symbols\nstock_symbols = ['HDFCBANK.NS', 'TCS.NS', 'ICICIBANK.NS', 'INFY.NS', 'ADANIPOWER.NS',\n                 'BAJFINANCE.NS', 'MARUTI.NS', 'HINDUNILVR.NS', 'ASIANPAINT.NS',\n                 'DRREDDY.NS', 'LTIM.NS', 'EICHERMOT.NS', 'CHOLAFIN.NS',\n                 'IDFCFIRSTB.NS', 'ASHOKLEY.NS', 'GESHIP.NS', 'SBICARD.NS',\n                 'BRITANNIA.NS', 'IIFL.NS']\n\n# Download historical data for each stock\nstock_data = {}\nfor symbol in stock_symbols:\n    data = yf.download(symbol, start='2000-01-01', end='2024-01-01')\n    stock_data[symbol] = data\n\n# Extract close prices for each stock\nclose_prices = {}\nfor symbol, data in stock_data.items():\n    close_prices[symbol] = data['Close']\n\n# Create DataFrames for each stock\nstock_dfs = {}\nfor symbol, prices in close_prices.items():\n    stock_dfs[symbol] = pd.DataFrame({'Close': prices})\n\n# Convert close prices of each stock DataFrame into NumPy arrays\nstock_arrays = {}\nfor symbol, df in stock_dfs.items():\n    stock_arrays[symbol] = df['Close'].values\n    stock_arrays[symbol]=stock_arrays[symbol].reshape(-1,1)\n\n# Now you have the close price arrays for each stock in the stock_arrays dictionary\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"stock_arrays['TCS.NS']","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"stock_data_dict = {}\n\nfor stock in stock_arrays.keys():\n    stock_arrays[stock]=stock_arrays[stock].reshape(-1,1)\n    # Fit the preprocessor pipeline to the current stock's data\n    preprocess_pipe.fit(stock_arrays[stock])","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"for stock in stock_arrays.keys():\n    # Transform the data\n    x_transformed, y_transformed, x_test, y_test = preprocess_pipe.transform(stock_arrays[stock])\n    stock_data_dict[stock] = {\n        'x_transformed': x_transformed,\n        'y_transformed': y_transformed,\n        'x_test': x_test,\n        'y_test': y_test}","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"type(stock_data_dict['IIFL.NS']['x_test'])","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"for stock in stock_arrays.keys():\n    x_transformed = stock_data_dict[stock]['x_transformed']\n    y_transformed = stock_data_dict[stock]['y_transformed']\n    print(\"Loss for\", stock)\n    print()\n    predictions = pipe.fit(x_transformed,y_transformed)\n    stock_data_dict[stock] = {\n        'predictions': predictions\n    }","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"stock_data_dict['IIFL.NS']['x_test']","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"for stock in stock_arrays.keys():\n    x_test = stock_data_dict[stock]['x_test']\n#     y_transformed = stock_data_dict[stock]['y_transformed']\n    predictions = pipe.predict(x_test)\n    stock_data_dict[stock] = {\n        'predictions': predictions\n    }","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"predictions1 = stock_data_dict['IIFL.NS']['predictions']\npredictions1","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"predictions=predictions.reshape(-1, 1)\n    # Inverse transform predictions\n    predictions = scaler.inverse_transform(predictions)\n    stock_data_dict[stock] = {\n        'predictions': predictions\n    }","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"for stock in stock_arrays.keys():\n    predictions = stock_data_dict[stock]['predictions']\n    y_test = stock_data_dict[stock]['y_test']\n    rmse = np.sqrt(mean_squared_error(predictions, y_test))\n    stock_data_dict[stock] = {\n        'rmse': rmse\n    }","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"for stock in stock_arrays.keys():\n    trainig_data_len=int(np.ceil( len(dataset1) * .83 ))\n    train = data[:training_data_len]\n    valid = data[training_data_len:]\n    valid['Predictions'] = predictions\n    # Visualize the data\n    plt.figure(figsize=(16,6))\n    plt.title('Model')\n    plt.xlabel('Date', fontsize=18)\n    plt.ylabel('Close Price USD ($)', fontsize=18)\n    plt.plot(train['Close'])\n    plt.plot(valid[['Close', 'Predictions']])\n    plt.legend(['Train', 'Val', 'Predictions'], loc='lower right')\n    plt.show()\n    print(valid)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"stock_data_dict['ASHOKLEY.NS']['x_test']","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Define an empty dictionary to store data for each stock\nstock_data_dict = {}\n\nfor stock in stock_arrays.keys():\n    stock_arrays[stock]=stock_arrays[stock].reshape(-1,1)\n    # Fit the preprocessor pipeline to the current stock's data\n    preprocess_pipe.fit(stock_arrays[stock])\n    \n    # Transform the data\n    x_transformed, y_transformed, x_test, y_test = preprocess_pipe.transform(stock_arrays[stock])\n    \n    # Make predictions\n    predictions = pipe.predict(x_test)\n    \n    predictions=predictions.reshape(-1, 1)\n    \n    # Inverse transform predictions\n    predictions = scaler.inverse_transform(predictions)\n    \n    # Calculate RMSE\n    rmse = np.sqrt(mean_squared_error(predictions, y_test))\n    \n    # Store data in the dictionary\n    stock_data_dict[stock] = {\n        'x_transformed': x_transformed,\n        'y_transformed': y_transformed,\n        'x_test': x_test,\n        'y_test': y_test,\n        'predictions': predictions,\n        'rmse': rmse\n    }\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]}]}